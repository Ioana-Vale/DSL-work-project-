module org.xtext.example.mydsl.GenerateMyDsl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.emf.mwe.utils.*

var rootPath = ".."
var projectName="org.xtext.example.mydsl"
var runtimeProject="../${projectName}"

Workflow {
    
    component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component=org.eclipse.emf.mwe2.ecore.EcoreGenerator {
        genModel="platform:/resource/org.xtext.example.mydsl/model/MyDsl.genmodel"
        srcPath="platform:/resource/org.xtext.example.mydsl/src-gen"
        }
        
        bean=org.eclipse.emf.mwe.utils.StandaloneSetup {
        scanClassPath = true
        platformUri = "${rootPath}"
     }	
        component = XtextGenerator {
    // We tell the xtext generator to avoid cleaning, because otherwise it
    // would remove the classes generated by the ecore
		cleaner = {
			enabled = false
		} 
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.xtext.example.mydsl"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = false
			}
		}
		language=StandardLanguage{
			name="org.xtext.example.mydsl.MyDsl"
			fileExtensions="block"
			referencedResource="platform:/resource/org.xtext.example.mydsl/model/MyDsl.genmodel"
			serializer = {
				generateStub = false
			}
			validator = {
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true
			}
			generator = {
				generateXtendStub = true
			}
			junitSupport = {
				junitVersion = "5"
			}
		}
	}
}