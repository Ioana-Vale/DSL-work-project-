package org.xtext.example.mydsl.scoping;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.xtext.example.mydsl.builtin.MyDslBuiltInFunctions;
import org.xtext.example.mydsl.myDsl.Block;
import org.xtext.example.mydsl.myDsl.FunctionCall;
import org.xtext.example.mydsl.myDsl.FunctionDeclaration;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.VariableDeclaration;
import org.xtext.example.mydsl.myDsl.VariableReference;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class MyDslScopeProvider extends AbstractDeclarativeScopeProvider {

    /**
     * Returns the scope for variable references.
     * @param ref the variable reference.
     * @return the scope containing the variable declarations.
     */
	public IScope scope_VariableReference_name(VariableReference ref) {
	    EObject container = EcoreUtil2.getContainerOfType(ref, FunctionDeclaration.class);
	    
	    // If it's inside a function, look inside the function's body
	    if (container instanceof FunctionDeclaration) {
	        FunctionDeclaration function = (FunctionDeclaration) container;
	        return Scopes.scopeFor(function.getBody().getStatements().stream()
	            .filter(stmt -> stmt instanceof VariableDeclaration)
	            .map(stmt -> (VariableDeclaration) stmt)
	            .collect(Collectors.toList()));
	    }
	    
	    container = EcoreUtil2.getContainerOfType(ref, Block.class);
	    
	    // If it's inside a block, look inside the block's statements
	    if (container instanceof Block) {
	        Block block = (Block) container;
	        return Scopes.scopeFor(block.getStatements().stream()
	            .filter(stmt -> stmt instanceof VariableDeclaration)
	            .map(stmt -> (VariableDeclaration) stmt)
	            .collect(Collectors.toList()));
	    }
	    
	    return Scopes.scopeFor(Collections.emptyList());
	}

    /**
     * Returns the scope for function calls.
     * @param call the function call.
     * @return the scope containing the function declarations.
     */
	public IScope scope_FunctionCall_name(FunctionCall call) {
	    EObject container = EcoreUtil2.getContainerOfType(call, FunctionDeclaration.class);
	    
	    // If it's inside a function, look inside the function's body
	    if (container instanceof FunctionDeclaration) {
	        FunctionDeclaration function = (FunctionDeclaration) container;
	        return Scopes.scopeFor(function.getBody().getStatements().stream()
	            .filter(stmt -> stmt instanceof FunctionDeclaration)
	            .map(stmt -> (FunctionDeclaration) stmt)
	            .collect(Collectors.toList()));
	    }
	    
	    container = EcoreUtil2.getContainerOfType(call, Block.class);
	    
	    // If it's inside a block, look inside the block's statements
	    if (container instanceof Block) {
	        Block block = (Block) container;
	        return Scopes.scopeFor(block.getStatements().stream()
	            .filter(stmt -> stmt instanceof FunctionDeclaration)
	            .map(stmt -> (FunctionDeclaration) stmt)
	            .collect(Collectors.toList()));
	    }
	    
	    return Scopes.scopeFor(Collections.emptyList());
	}

	@Override
	public IScope getScope(EObject context, EReference reference) {
	    IScope parentScope = super.getScope(context, reference);

	    if (reference == MyDslPackage.Literals.FUNCTION_CALL__NAME) {
	        EList<EObject> builtInFunctions = MyDslBuiltInFunctions.loadBuiltInFunctions();

	        Map<QualifiedName, EObject> functionMap = new HashMap<>();
	        for (EObject func : builtInFunctions) {
	            if (func instanceof FunctionDeclaration) {
	                FunctionDeclaration functionDeclaration = (FunctionDeclaration) func;
	                QualifiedName qualifiedName = QualifiedName.create(functionDeclaration.getName());
	                functionMap.put(qualifiedName, func);
	            }
	        }

	        List<IEObjectDescription> descriptions = functionMap.entrySet().stream()
	            .map(entry -> EObjectDescription.create(entry.getKey(), entry.getValue()))
	            .collect(Collectors.toList());

	        IScope builtInFunctionsScope = new SimpleScope(parentScope, descriptions);
	        return builtInFunctionsScope;
	    }

	    return parentScope;
	}
}