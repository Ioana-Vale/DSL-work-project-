/*
 * generated by Xtext 2.35.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	iv_ruleDomainModel=ruleDomainModel
	{ $current=$iv_ruleDomainModel.current; }
	EOF;

// Rule DomainModel
ruleDomainModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainModelAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainModelRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"org.xtext.example.mydsl.MyDsl.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getImportAccess().getImportedElementImportElementParserRuleCall_1_0_0_0_0());
							}
							lv_importedElement_1_0=ruleImportElement
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getImportRule());
								}
								add(
									$current,
									"importedElement",
									lv_importedElement_1_0,
									"org.xtext.example.mydsl.MyDsl.ImportElement");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_2=','
						{
							newLeafNode(otherlv_2, grammarAccess.getImportAccess().getCommaKeyword_1_0_0_1());
						}
					)?
				)
				    |
				(
					otherlv_3='{'
					{
						newLeafNode(otherlv_3, grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1_0_1_0());
					}
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getImportAccess().getImportedElementsImportElementParserRuleCall_1_0_1_1_0_0());
								}
								lv_importedElements_4_0=ruleImportElement
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getImportRule());
									}
									add(
										$current,
										"importedElements",
										lv_importedElements_4_0,
										"org.xtext.example.mydsl.MyDsl.ImportElement");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							otherlv_5=','
							{
								newLeafNode(otherlv_5, grammarAccess.getImportAccess().getCommaKeyword_1_0_1_1_1_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getImportAccess().getImportedElementsImportElementParserRuleCall_1_0_1_1_1_1_0());
									}
									lv_importedElements_6_0=ruleImportElement
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getImportRule());
										}
										add(
											$current,
											"importedElements",
											lv_importedElements_6_0,
											"org.xtext.example.mydsl.MyDsl.ImportElement");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)*
					)?
					otherlv_7='}'
					{
						newLeafNode(otherlv_7, grammarAccess.getImportAccess().getRightCurlyBracketKeyword_1_0_1_2());
					}
				)
			)+
			otherlv_8='from'
			{
				newLeafNode(otherlv_8, grammarAccess.getImportAccess().getFromKeyword_1_1());
			}
		)?
		(
			(
				lv_importURI_9_0=RULE_STRING
				{
					newLeafNode(lv_importURI_9_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_9_0,
						"org.xtext.example.mydsl.MyDsl.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleImportElement
entryRuleImportElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportElementRule()); }
	iv_ruleImportElement=ruleImportElement
	{ $current=$iv_ruleImportElement.current; }
	EOF;

// Rule ImportElement
ruleImportElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_element_0_1=RULE_ID
					{
						newLeafNode(lv_element_0_1, grammarAccess.getImportElementAccess().getElementIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportElementRule());
						}
						setWithLastConsumed(
							$current,
							"element",
							lv_element_0_1,
							"org.eclipse.xtext.common.Terminals.ID");
					}
					    |
					lv_element_0_2='*'
					{
						newLeafNode(lv_element_0_2, grammarAccess.getImportElementAccess().getElementAsteriskKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportElementRule());
						}
						setWithLastConsumed($current, "element", lv_element_0_2, null);
					}
					    |
					lv_element_0_3=RULE_STRING
					{
						newLeafNode(lv_element_0_3, grammarAccess.getImportElementAccess().getElementSTRINGTerminalRuleCall_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportElementRule());
						}
						setWithLastConsumed(
							$current,
							"element",
							lv_element_0_3,
							"org.xtext.example.mydsl.MyDsl.STRING");
					}
				)
			)
		)
		(
			otherlv_1='as'
			{
				newLeafNode(otherlv_1, grammarAccess.getImportElementAccess().getAsKeyword_1_0());
			}
			(
				(
					lv_alias_2_0=RULE_ID
					{
						newLeafNode(lv_alias_2_0, grammarAccess.getImportElementAccess().getAliasIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportElementRule());
						}
						setWithLastConsumed(
							$current,
							"alias",
							lv_alias_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0());
		}
		this_VariableDeclaration_0=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_1());
		}
		this_ExpressionStatement_1=ruleExpressionStatement
		{
			$current = $this_ExpressionStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2());
		}
		this_IfStatement_2=ruleIfStatement
		{
			$current = $this_IfStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForLoopParserRuleCall_3());
		}
		this_ForLoop_3=ruleForLoop
		{
			$current = $this_ForLoop_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_4());
		}
		this_WhileLoop_4=ruleWhileLoop
		{
			$current = $this_WhileLoop_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDoWhileLoopParserRuleCall_5());
		}
		this_DoWhileLoop_5=ruleDoWhileLoop
		{
			$current = $this_DoWhileLoop_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_6());
		}
		ruleContinueStatement
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_7());
		}
		ruleBreakStatement
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFunctionDeclarationParserRuleCall_8());
		}
		this_FunctionDeclaration_8=ruleFunctionDeclaration
		{
			$current = $this_FunctionDeclaration_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_9());
		}
		this_FunctionCall_9=ruleFunctionCall
		{
			$current = $this_FunctionCall_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFunctionReturnParserRuleCall_10());
		}
		this_FunctionReturn_10=ruleFunctionReturn
		{
			$current = $this_FunctionReturn_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getConsoleLogStatementParserRuleCall_11());
		}
		this_ConsoleLogStatement_11=ruleConsoleLogStatement
		{
			$current = $this_ConsoleLogStatement_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTryCatchStatementParserRuleCall_12());
		}
		this_TryCatchStatement_12=ruleTryCatchStatement
		{
			$current = $this_TryCatchStatement_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_13());
		}
		this_SwitchStatement_13=ruleSwitchStatement
		{
			$current = $this_SwitchStatement_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStringManipulationStatementParserRuleCall_14());
		}
		this_StringManipulationStatement_14=ruleStringManipulationStatement
		{
			$current = $this_StringManipulationStatement_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getThrowStatementParserRuleCall_15());
		}
		this_ThrowStatement_15=ruleThrowStatement
		{
			$current = $this_ThrowStatement_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getImportParserRuleCall_16());
		}
		this_Import_16=ruleImport
		{
			$current = $this_Import_16.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"org.xtext.example.mydsl.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.example.mydsl.MyDsl.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExprExpressionParserRuleCall_2_1_0());
					}
					lv_expr_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"expr",
							lv_expr_3_0,
							"org.xtext.example.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	iv_ruleExpressionStatement=ruleExpressionStatement
	{ $current=$iv_ruleExpressionStatement.current; }
	EOF;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_0_0());
				}
				lv_expr_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
					}
					set(
						$current,
						"expr",
						lv_expr_0_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall_0());
		}
		this_LogicalExpression_0=ruleLogicalExpression
		{
			$current = $this_LogicalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPostfixOperatorParserRuleCall_1());
		}
		this_PostfixOperator_1=rulePostfixOperator
		{
			$current = $this_PostfixOperator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPrefixOperatorParserRuleCall_2());
		}
		this_PrefixOperator_2=rulePrefixOperator
		{
			$current = $this_PrefixOperator_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAugmentedAssignmentParserRuleCall_3());
		}
		this_AugmentedAssignment_3=ruleAugmentedAssignment
		{
			$current = $this_AugmentedAssignment_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAugmentedAssignment
entryRuleAugmentedAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAugmentedAssignmentRule()); }
	iv_ruleAugmentedAssignment=ruleAugmentedAssignment
	{ $current=$iv_ruleAugmentedAssignment.current; }
	EOF;

// Rule AugmentedAssignment
ruleAugmentedAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAugmentedAssignmentAccess().getVariableReferenceParserRuleCall_0());
		}
		this_VariableReference_0=ruleVariableReference
		{
			$current = $this_VariableReference_0.current;
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getAugmentedAssignmentAccess().getAugmentedOperatorParserRuleCall_1());
		}
		ruleAugmentedOperator
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAugmentedAssignmentAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAugmentedAssignmentRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	iv_ruleLogicalExpression=ruleLogicalExpression
	{ $current=$iv_ruleLogicalExpression.current; }
	EOF;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalExpressionAccess().getComparisonExpressionParserRuleCall_0());
		}
		this_ComparisonExpression_0=ruleComparisonExpression
		{
			$current = $this_ComparisonExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getLogicalExpressionAccess().getLogicalExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				{
					newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLogicalOperatorParserRuleCall_1_0_1());
				}
				ruleLogicalOperator
				{
					afterParserOrEnumRuleCall();
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightComparisonExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyDsl.ComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonExpressionAccess().getArithmeticExpressionParserRuleCall_0());
		}
		this_ArithmeticExpression_0=ruleArithmeticExpression
		{
			$current = $this_ArithmeticExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getComparisonExpressionAccess().getComparisonOperatorParserRuleCall_1_1());
			}
			ruleComparisonOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightArithmeticExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyDsl.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	iv_ruleArithmeticExpression=ruleArithmeticExpression
	{ $current=$iv_ruleArithmeticExpression.current; }
	EOF;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getMultiplicationExpressionParserRuleCall_0());
		}
		this_MultiplicationExpression_0=ruleMultiplicationExpression
		{
			$current = $this_MultiplicationExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getArithmeticExpressionAccess().getArithmeticExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getArithmeticOperatorParserRuleCall_1_1());
			}
			ruleArithmeticOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getRightMultiplicationExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplicationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyDsl.MultiplicationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationExpressionRule()); }
	iv_ruleMultiplicationExpression=ruleMultiplicationExpression
	{ $current=$iv_ruleMultiplicationExpression.current; }
	EOF;

// Rule MultiplicationExpression
ruleMultiplicationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getExponentiationExpressionParserRuleCall_0());
		}
		this_ExponentiationExpression_0=ruleExponentiationExpression
		{
			$current = $this_ExponentiationExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationExpressionAccess().getMultiplicationExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getMultiplicationOperatorParserRuleCall_1_1());
			}
			ruleMultiplicationOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightExponentiationExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExponentiationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyDsl.ExponentiationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExponentiationExpression
entryRuleExponentiationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExponentiationExpressionRule()); }
	iv_ruleExponentiationExpression=ruleExponentiationExpression
	{ $current=$iv_ruleExponentiationExpression.current; }
	EOF;

// Rule ExponentiationExpression
ruleExponentiationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExponentiationExpressionAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExponentiationExpressionAccess().getExponentiationExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getExponentiationExpressionAccess().getExponentiationOperatorParserRuleCall_1_1());
			}
			ruleExponentiationOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExponentiationExpressionAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExponentiationExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.MyDsl.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_1());
		}
		this_NumberLiteral_3=ruleNumberLiteral
		{
			$current = $this_NumberLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getStringLiteralParserRuleCall_2());
		}
		this_StringLiteral_4=ruleStringLiteral
		{
			$current = $this_StringLiteral_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getCharLiteralParserRuleCall_3());
		}
		this_CharLiteral_5=ruleCharLiteral
		{
			$current = $this_CharLiteral_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getVariableReferenceParserRuleCall_4());
		}
		this_VariableReference_6=ruleVariableReference
		{
			$current = $this_VariableReference_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAnonymousFunctionParserRuleCall_5());
		}
		this_AnonymousFunction_7=ruleAnonymousFunction
		{
			$current = $this_AnonymousFunction_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getBooleanParserRuleCall_6());
		}
		this_Boolean_8=ruleBoolean
		{
			$current = $this_Boolean_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNotBooleanParserRuleCall_7());
		}
		this_NotBoolean_9=ruleNotBoolean
		{
			$current = $this_NotBoolean_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePostfixOperator
entryRulePostfixOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixOperatorRule()); }
	iv_rulePostfixOperator=rulePostfixOperator
	{ $current=$iv_rulePostfixOperator.current; }
	EOF;

// Rule PostfixOperator
rulePostfixOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPostfixOperatorAccess().getVariableReferenceParserRuleCall_0());
		}
		this_VariableReference_0=ruleVariableReference
		{
			$current = $this_VariableReference_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1='++'
			{
				newLeafNode(otherlv_1, grammarAccess.getPostfixOperatorAccess().getPlusSignPlusSignKeyword_1_0());
			}
			    |
			otherlv_2='--'
			{
				newLeafNode(otherlv_2, grammarAccess.getPostfixOperatorAccess().getHyphenMinusHyphenMinusKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRulePrefixOperator
entryRulePrefixOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixOperatorRule()); }
	iv_rulePrefixOperator=rulePrefixOperator
	{ $current=$iv_rulePrefixOperator.current; }
	EOF;

// Rule PrefixOperator
rulePrefixOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='++'
			{
				newLeafNode(otherlv_0, grammarAccess.getPrefixOperatorAccess().getPlusSignPlusSignKeyword_0_0());
			}
			    |
			otherlv_1='--'
			{
				newLeafNode(otherlv_1, grammarAccess.getPrefixOperatorAccess().getHyphenMinusHyphenMinusKeyword_0_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getPrefixOperatorAccess().getVariableReferenceParserRuleCall_1());
		}
		this_VariableReference_2=ruleVariableReference
		{
			$current = $this_VariableReference_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAnonymousFunction
entryRuleAnonymousFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnonymousFunctionRule()); }
	iv_ruleAnonymousFunction=ruleAnonymousFunction
	{ $current=$iv_ruleAnonymousFunction.current; }
	EOF;

// Rule AnonymousFunction
ruleAnonymousFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnonymousFunctionAccess().getFunctionKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAnonymousFunctionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_parameters_2_0=RULE_ID
					{
						newLeafNode(lv_parameters_2_0, grammarAccess.getAnonymousFunctionAccess().getParametersIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAnonymousFunctionRule());
						}
						addWithLastConsumed(
							$current,
							"parameters",
							lv_parameters_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getAnonymousFunctionAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						lv_parameters_4_0=RULE_ID
						{
							newLeafNode(lv_parameters_4_0, grammarAccess.getAnonymousFunctionAccess().getParametersIDTerminalRuleCall_2_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAnonymousFunctionRule());
							}
							addWithLastConsumed(
								$current,
								"parameters",
								lv_parameters_4_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAnonymousFunctionAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnonymousFunctionAccess().getBodyBlockParserRuleCall_4_0());
				}
				lv_body_6_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnonymousFunctionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"org.xtext.example.mydsl.MyDsl.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_NUMBER
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumberLiteralAccess().getValueNUMBERTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.MyDsl.NUMBER");
			}
		)
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current; }
	EOF;

// Rule Boolean
ruleBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanAccess().getBooleanAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_value_1_1='true'
					{
						newLeafNode(lv_value_1_1, grammarAccess.getBooleanAccess().getValueTrueKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanRule());
						}
						setWithLastConsumed($current, "value", lv_value_1_1, null);
					}
					    |
					lv_value_1_2='false'
					{
						newLeafNode(lv_value_1_2, grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanRule());
						}
						setWithLastConsumed($current, "value", lv_value_1_2, null);
					}
					    |
					lv_value_1_3='null'
					{
						newLeafNode(lv_value_1_3, grammarAccess.getBooleanAccess().getValueNullKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanRule());
						}
						setWithLastConsumed($current, "value", lv_value_1_3, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNotBoolean
entryRuleNotBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotBooleanRule()); }
	iv_ruleNotBoolean=ruleNotBoolean
	{ $current=$iv_ruleNotBoolean.current; }
	EOF;

// Rule NotBoolean
ruleNotBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNotBooleanAccess().getNotBooleanAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_NOT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getNotBooleanAccess().getValueNOTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotBooleanRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.xtext.example.mydsl.MyDsl.NOT");
				}
			)
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.MyDsl.STRING");
			}
		)
	)
;

// Entry rule entryRuleCharLiteral
entryRuleCharLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharLiteralRule()); }
	iv_ruleCharLiteral=ruleCharLiteral
	{ $current=$iv_ruleCharLiteral.current; }
	EOF;

// Rule CharLiteral
ruleCharLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_CHAR
			{
				newLeafNode(lv_value_0_0, grammarAccess.getCharLiteralAccess().getValueCHARTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCharLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.MyDsl.CHAR");
			}
		)
	)
;

// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	iv_ruleVariableReference=ruleVariableReference
	{ $current=$iv_ruleVariableReference.current; }
	EOF;

// Rule VariableReference
ruleVariableReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableReferenceRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getVariableReferenceAccess().getNameVariableDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOperatorRule()); }
	iv_ruleComparisonOperator=ruleComparisonOperator
	{ $current=$iv_ruleComparisonOperator.current.getText(); }
	EOF;

// Rule ComparisonOperator
ruleComparisonOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getLessThanSignEqualsSignKeyword_0());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getLessThanSignKeyword_1());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getGreaterThanSignEqualsSignKeyword_2());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getGreaterThanSignKeyword_3());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getExclamationMarkEqualsSignKeyword_4());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getEqualsSignEqualsSignKeyword_5());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getEqualsSignKeyword_6());
		}
	)
;

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOperatorRule()); }
	iv_ruleLogicalOperator=ruleLogicalOperator
	{ $current=$iv_ruleLogicalOperator.current.getText(); }
	EOF;

// Rule LogicalOperator
ruleLogicalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='&&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getAmpersandAmpersandKeyword_0());
		}
		    |
		kw='||'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getVerticalLineVerticalLineKeyword_1());
		}
	)
;

// Entry rule entryRuleMultiplicationOperator
entryRuleMultiplicationOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationOperatorRule()); }
	iv_ruleMultiplicationOperator=ruleMultiplicationOperator
	{ $current=$iv_ruleMultiplicationOperator.current.getText(); }
	EOF;

// Rule MultiplicationOperator
ruleMultiplicationOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicationOperatorAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicationOperatorAccess().getSolidusKeyword_1());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicationOperatorAccess().getPercentSignKeyword_2());
		}
	)
;

// Entry rule entryRuleArithmeticOperator
entryRuleArithmeticOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticOperatorRule()); }
	iv_ruleArithmeticOperator=ruleArithmeticOperator
	{ $current=$iv_ruleArithmeticOperator.current.getText(); }
	EOF;

// Rule ArithmeticOperator
ruleArithmeticOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleExponentiationOperator
entryRuleExponentiationOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExponentiationOperatorRule()); }
	iv_ruleExponentiationOperator=ruleExponentiationOperator
	{ $current=$iv_ruleExponentiationOperator.current.getText(); }
	EOF;

// Rule ExponentiationOperator
ruleExponentiationOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='**'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getExponentiationOperatorAccess().getAsteriskAsteriskKeyword());
	}
;

// Entry rule entryRuleAugmentedOperator
entryRuleAugmentedOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAugmentedOperatorRule()); }
	iv_ruleAugmentedOperator=ruleAugmentedOperator
	{ $current=$iv_ruleAugmentedOperator.current.getText(); }
	EOF;

// Rule AugmentedOperator
ruleAugmentedOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAugmentedOperatorAccess().getPlusSignEqualsSignKeyword_0());
		}
		    |
		kw='-='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAugmentedOperatorAccess().getHyphenMinusEqualsSignKeyword_1());
		}
		    |
		kw='*='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAugmentedOperatorAccess().getAsteriskEqualsSignKeyword_2());
		}
		    |
		kw='/='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAugmentedOperatorAccess().getSolidusEqualsSignKeyword_3());
		}
		    |
		kw='%='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAugmentedOperatorAccess().getPercentSignEqualsSignKeyword_4());
		}
		    |
		kw='**='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAugmentedOperatorAccess().getAsteriskAsteriskEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getThenBranchBlockParserRuleCall_4_0());
				}
				lv_thenBranch_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"thenBranch",
						lv_thenBranch_4_0,
						"org.xtext.example.mydsl.MyDsl.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseBranchBlockParserRuleCall_5_1_0());
					}
					lv_elseBranch_6_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						set(
							$current,
							"elseBranch",
							lv_elseBranch_6_0,
							"org.xtext.example.mydsl.MyDsl.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	iv_ruleForLoop=ruleForLoop
	{ $current=$iv_ruleForLoop.current; }
	EOF;

// Rule ForLoop
ruleForLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForLoopAccess().getForKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getInitializationExpressionParserRuleCall_2_0());
				}
				lv_initialization_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"initialization",
						lv_initialization_2_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getForLoopAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getConditionExpressionParserRuleCall_4_0());
				}
				lv_condition_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"condition",
						lv_condition_4_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getForLoopAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getIncrementExpressionParserRuleCall_6_0());
				}
				lv_increment_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"increment",
						lv_increment_6_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getForLoopAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getBodyBlockParserRuleCall_8_0());
				}
				lv_body_8_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"org.xtext.example.mydsl.MyDsl.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	iv_ruleWhileLoop=ruleWhileLoop
	{ $current=$iv_ruleWhileLoop.current; }
	EOF;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileLoopAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getBodyBlockParserRuleCall_4_0());
				}
				lv_body_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					set(
						$current,
						"body",
						lv_body_4_0,
						"org.xtext.example.mydsl.MyDsl.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDoWhileLoop
entryRuleDoWhileLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoWhileLoopRule()); }
	iv_ruleDoWhileLoop=ruleDoWhileLoop
	{ $current=$iv_ruleDoWhileLoop.current; }
	EOF;

// Rule DoWhileLoop
ruleDoWhileLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='do'
		{
			newLeafNode(otherlv_0, grammarAccess.getDoWhileLoopAccess().getDoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileLoopAccess().getBodyBlockParserRuleCall_1_0());
				}
				lv_body_1_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"org.xtext.example.mydsl.MyDsl.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='while'
		{
			newLeafNode(otherlv_2, grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileLoopAccess().getConditionExpressionParserRuleCall_4_0());
				}
				lv_condition_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
					}
					set(
						$current,
						"condition",
						lv_condition_4_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getDoWhileLoopAccess().getRightParenthesisKeyword_5());
		}
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDoWhileLoopAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContinueStatementRule()); }
	iv_ruleContinueStatement=ruleContinueStatement
	{ $current=$iv_ruleContinueStatement.current.getText(); }
	EOF;

// Rule ContinueStatement
ruleContinueStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='continue'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getContinueStatementAccess().getContinueKeyword_0());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getContinueStatementAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	iv_ruleBreakStatement=ruleBreakStatement
	{ $current=$iv_ruleBreakStatement.current.getText(); }
	EOF;

// Rule BreakStatement
ruleBreakStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='break'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBreakStatementAccess().getBreakKeyword_0());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBreakStatementAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	iv_ruleFunctionDeclaration=ruleFunctionDeclaration
	{ $current=$iv_ruleFunctionDeclaration.current; }
	EOF;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getReturnTypeTypeEnumRuleCall_0_0());
				}
				lv_returnType_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_0_0,
						"org.xtext.example.mydsl.MyDsl.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='function'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					lv_parameters_4_0=RULE_ID
					{
						newLeafNode(lv_parameters_4_0, grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionDeclarationRule());
						}
						addWithLastConsumed(
							$current,
							"parameters",
							lv_parameters_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						lv_parameters_6_0=RULE_ID
						{
							newLeafNode(lv_parameters_6_0, grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_4_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFunctionDeclarationRule());
							}
							addWithLastConsumed(
								$current,
								"parameters",
								lv_parameters_6_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_6_0());
				}
				lv_body_8_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"org.xtext.example.mydsl.MyDsl.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getNameFunctionDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_0_0());
					}
					lv_arguments_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"org.xtext.example.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_0());
						}
						lv_arguments_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_4_0,
								"org.xtext.example.mydsl.MyDsl.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
		}
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionCallAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleFunctionReturn
entryRuleFunctionReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionReturnRule()); }
	iv_ruleFunctionReturn=ruleFunctionReturn
	{ $current=$iv_ruleFunctionReturn.current; }
	EOF;

// Rule FunctionReturn
ruleFunctionReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionReturnAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionReturnAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionReturnRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionReturnAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleConsoleLogStatement
entryRuleConsoleLogStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConsoleLogStatementRule()); }
	iv_ruleConsoleLogStatement=ruleConsoleLogStatement
	{ $current=$iv_ruleConsoleLogStatement.current; }
	EOF;

// Rule ConsoleLogStatement
ruleConsoleLogStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConsoleLogStatementAccess().getConsoleLogStatementAction_0(),
					$current);
			}
		)
		otherlv_1='console.log'
		{
			newLeafNode(otherlv_1, grammarAccess.getConsoleLogStatementAccess().getConsoleLogKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getConsoleLogStatementAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConsoleLogStatementAccess().getArgumentsExpressionParserRuleCall_3_0_0());
					}
					lv_arguments_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConsoleLogStatementRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"org.xtext.example.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getConsoleLogStatementAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConsoleLogStatementAccess().getArgumentsExpressionParserRuleCall_3_1_1_0());
						}
						lv_arguments_5_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConsoleLogStatementRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_5_0,
								"org.xtext.example.mydsl.MyDsl.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getConsoleLogStatementAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getConsoleLogStatementAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleTryCatchStatement
entryRuleTryCatchStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTryCatchStatementRule()); }
	iv_ruleTryCatchStatement=ruleTryCatchStatement
	{ $current=$iv_ruleTryCatchStatement.current; }
	EOF;

// Rule TryCatchStatement
ruleTryCatchStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='try'
		{
			newLeafNode(otherlv_0, grammarAccess.getTryCatchStatementAccess().getTryKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTryCatchStatementAccess().getTryBlockBlockParserRuleCall_1_0());
				}
				lv_tryBlock_1_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTryCatchStatementRule());
					}
					set(
						$current,
						"tryBlock",
						lv_tryBlock_1_0,
						"org.xtext.example.mydsl.MyDsl.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='catch'
		{
			newLeafNode(otherlv_2, grammarAccess.getTryCatchStatementAccess().getCatchKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getTryCatchStatementAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				lv_exception_4_0=RULE_ID
				{
					newLeafNode(lv_exception_4_0, grammarAccess.getTryCatchStatementAccess().getExceptionIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTryCatchStatementRule());
					}
					setWithLastConsumed(
						$current,
						"exception",
						lv_exception_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTryCatchStatementAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTryCatchStatementAccess().getCatchBlockBlockParserRuleCall_6_0());
				}
				lv_catchBlock_6_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTryCatchStatementRule());
					}
					set(
						$current,
						"catchBlock",
						lv_catchBlock_6_0,
						"org.xtext.example.mydsl.MyDsl.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); }
	iv_ruleSwitchStatement=ruleSwitchStatement
	{ $current=$iv_ruleSwitchStatement.current; }
	EOF;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseParserRuleCall_5_0());
				}
				lv_cases_5_0=ruleCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
					}
					add(
						$current,
						"cases",
						lv_cases_5_0,
						"org.xtext.example.mydsl.MyDsl.Case");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatementAccess().getDefaultCaseDefaultParserRuleCall_6_0());
				}
				lv_defaultCase_6_0=ruleDefault
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
					}
					set(
						$current,
						"defaultCase",
						lv_defaultCase_6_0,
						"org.xtext.example.mydsl.MyDsl.Default");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	iv_ruleCase=ruleCase
	{ $current=$iv_ruleCase.current; }
	EOF;

// Rule Case
ruleCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtext.example.mydsl.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDefault
entryRuleDefault returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultRule()); }
	iv_ruleDefault=ruleDefault
	{ $current=$iv_ruleDefault.current; }
	EOF;

// Rule Default
ruleDefault returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDefaultAccess().getDefaultAction_0(),
					$current);
			}
		)
		otherlv_1='default'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefaultAccess().getDefaultKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDefaultAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefaultAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefaultRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtext.example.mydsl.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStringManipulationStatement
entryRuleStringManipulationStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringManipulationStatementRule()); }
	iv_ruleStringManipulationStatement=ruleStringManipulationStatement
	{ $current=$iv_ruleStringManipulationStatement.current; }
	EOF;

// Rule StringManipulationStatement
ruleStringManipulationStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStringManipulationStatementAccess().getStringManipulationFunctionCallParserRuleCall_0());
		}
		this_StringManipulationFunctionCall_0=ruleStringManipulationFunctionCall
		{
			$current = $this_StringManipulationFunctionCall_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringManipulationStatementAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleStringManipulationFunctionCall
entryRuleStringManipulationFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringManipulationFunctionCallRule()); }
	iv_ruleStringManipulationFunctionCall=ruleStringManipulationFunctionCall
	{ $current=$iv_ruleStringManipulationFunctionCall.current; }
	EOF;

// Rule StringManipulationFunctionCall
ruleStringManipulationFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStringManipulationFunctionCallAccess().getSplitFunctionCallParserRuleCall_0());
		}
		this_SplitFunctionCall_0=ruleSplitFunctionCall
		{
			$current = $this_SplitFunctionCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStringManipulationFunctionCallAccess().getJoinFunctionCallParserRuleCall_1());
		}
		this_JoinFunctionCall_1=ruleJoinFunctionCall
		{
			$current = $this_JoinFunctionCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStringManipulationFunctionCallAccess().getSliceFunctionCallParserRuleCall_2());
		}
		this_SliceFunctionCall_2=ruleSliceFunctionCall
		{
			$current = $this_SliceFunctionCall_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSplitFunctionCall
entryRuleSplitFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSplitFunctionCallRule()); }
	iv_ruleSplitFunctionCall=ruleSplitFunctionCall
	{ $current=$iv_ruleSplitFunctionCall.current; }
	EOF;

// Rule SplitFunctionCall
ruleSplitFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='split'
		{
			newLeafNode(otherlv_0, grammarAccess.getSplitFunctionCallAccess().getSplitKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSplitFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSplitFunctionCallAccess().getStrExpressionParserRuleCall_2_0());
				}
				lv_str_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSplitFunctionCallRule());
					}
					set(
						$current,
						"str",
						lv_str_2_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSplitFunctionCallAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSplitFunctionCallAccess().getDelimiterStringLiteralParserRuleCall_4_0());
				}
				lv_delimiter_4_0=ruleStringLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSplitFunctionCallRule());
					}
					set(
						$current,
						"delimiter",
						lv_delimiter_4_0,
						"org.xtext.example.mydsl.MyDsl.StringLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSplitFunctionCallAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleJoinFunctionCall
entryRuleJoinFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinFunctionCallRule()); }
	iv_ruleJoinFunctionCall=ruleJoinFunctionCall
	{ $current=$iv_ruleJoinFunctionCall.current; }
	EOF;

// Rule JoinFunctionCall
ruleJoinFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='join'
		{
			newLeafNode(otherlv_0, grammarAccess.getJoinFunctionCallAccess().getJoinKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJoinFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinFunctionCallAccess().getStrExpressionParserRuleCall_2_0());
				}
				lv_str_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinFunctionCallRule());
					}
					add(
						$current,
						"str",
						lv_str_2_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getJoinFunctionCallAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinFunctionCallAccess().getStrExpressionParserRuleCall_3_1_0());
					}
					lv_str_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinFunctionCallRule());
						}
						add(
							$current,
							"str",
							lv_str_4_0,
							"org.xtext.example.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getJoinFunctionCallAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinFunctionCallAccess().getDelimiterStringLiteralParserRuleCall_5_0());
				}
				lv_delimiter_6_0=ruleStringLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinFunctionCallRule());
					}
					set(
						$current,
						"delimiter",
						lv_delimiter_6_0,
						"org.xtext.example.mydsl.MyDsl.StringLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getJoinFunctionCallAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleSliceFunctionCall
entryRuleSliceFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSliceFunctionCallRule()); }
	iv_ruleSliceFunctionCall=ruleSliceFunctionCall
	{ $current=$iv_ruleSliceFunctionCall.current; }
	EOF;

// Rule SliceFunctionCall
ruleSliceFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='slice'
		{
			newLeafNode(otherlv_0, grammarAccess.getSliceFunctionCallAccess().getSliceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSliceFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSliceFunctionCallAccess().getStrExpressionParserRuleCall_2_0());
				}
				lv_str_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSliceFunctionCallRule());
					}
					set(
						$current,
						"str",
						lv_str_2_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSliceFunctionCallAccess().getCommaKeyword_3());
		}
		(
			(
				lv_start_4_0=RULE_INT
				{
					newLeafNode(lv_start_4_0, grammarAccess.getSliceFunctionCallAccess().getStartINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSliceFunctionCallRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getSliceFunctionCallAccess().getCommaKeyword_5());
		}
		(
			(
				lv_end_6_0=RULE_INT
				{
					newLeafNode(lv_end_6_0, grammarAccess.getSliceFunctionCallAccess().getEndINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSliceFunctionCallRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getSliceFunctionCallAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleThrowStatement
entryRuleThrowStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThrowStatementRule()); }
	iv_ruleThrowStatement=ruleThrowStatement
	{ $current=$iv_ruleThrowStatement.current; }
	EOF;

// Rule ThrowStatement
ruleThrowStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='throw'
		{
			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getThrowStatementAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getThrowStatementRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getThrowStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Rule Type
ruleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getTypeAccess().getIntEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getIntEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='String'
			{
				$current = grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='char'
			{
				$current = grammarAccess.getTypeAccess().getCharEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getCharEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='let'
			{
				$current = grammarAccess.getTypeAccess().getLetEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getLetEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='boolean'
			{
				$current = grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='float'
			{
				$current = grammarAccess.getTypeAccess().getFloatEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTypeAccess().getFloatEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='var'
			{
				$current = grammarAccess.getTypeAccess().getVarEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getTypeAccess().getVarEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='const'
			{
				$current = grammarAccess.getTypeAccess().getConstEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getTypeAccess().getConstEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='void'
			{
				$current = grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_8());
			}
		)
	)
;

RULE_NUMBER : ('0'..'9')+;

RULE_NOT : '!'? ('true'|'false');

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_CHAR : '\'' ('a'..'z'|'A'..'Z'|'0'..'9') '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
