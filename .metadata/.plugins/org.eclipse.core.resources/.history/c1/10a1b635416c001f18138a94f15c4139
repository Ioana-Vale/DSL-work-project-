// automatically generated by Xtext
grammar ro.acorn.zamolxis.oe.abl.dsl.OpenEdgeAbl hidden(ML_COMMENT, SL_COMMENT)

import "http://ro.acorn.zamolxis.oe.demo.abl/OpenEdge/1.0"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	{Model}
	Space?
	(main=Block Space?)?;

Block:
	statements+=Statement
	(Space statements+=Statement)*;

Statement:
	Definition;
	
Definition:
	'define' Space
	(options+=DefinitionOption Space (options+=DefinitionOption Space)*)?
	object=ObjectDefinition
	Space? '.';

ObjectDefinition:
	Variable | Property | Buffer|Image|Button;
	
// TODO: add new object definitions in this section
//Image:
Image:
    'image' Space name=Name
(Space options+=ImageOption)*
    ;
	
ImageOption returns Option:
    FileOption | BgColorOption|Convert3DColorsOption|StretchToFitOption|FgColorOption| TooltipOption | StretchToFitWithRetain | TransparentOption|SizeOption;

FileOption returns ValueOption:
    {ValueOption}
    name='file' Space value=STRING;

BgColorOption returns ExpressionOption:
    name='bgcolor' Space expression=Expression;

FgColorOption returns ExpressionOption:
    name='fgcolor' Space expression=Expression;

Convert3DColorsOption returns NamedOption:
    name='convert-3d-colors';

TooltipOption returns ValueOption:
    name='tooltip' Space value=STRING;

StretchToFitOption returns NamedOption:
    name='stretch-to-fit';
       
TransparentOption returns NamedOption:
    name='transparent';
 
SizeOption:
    name=('size' | 'size-chars' | 'size-pixels') Space width=Number Space 'by' Space height=Number;    
 
 StretchToFitWithRetain returns NamedOption:
 	name= 'stretch-to-fit' Space 'retain-shape' ;  
 
 //Button:
 
 Button:
        ('private' Space)? 'button' Space name=Name
    (Space options+=ButtonOption)*
  // (Space? trigger+=WidgetTrigger)*
    ;

ButtonOption returns Option:
    AutoGoOption | AutoEndKeyOption | DefaultOption | BgColorOption | ContextHelpIdOption | DColorOption |ImagePhrase|
    DropTargetOption | FgColorOption | FontOption | ImageDownOption | ImageUpOption | ImageInsensitiveOption |
    MousePointerOption | LabelOption | LikeOption | PfcColorOption | SizeOption | NoFocusOption | NoConvert3DColorsOption | TooltipOption
    ;
   
AutoGoOption returns NamedOption:
 	name='auto-go';
 
AutoEndKeyOption returns NamedOption:
 	name='auto-endkey'
 ; 

DefaultOption returns NamedOption:
	name='default';

ContextHelpIdOption returns ExpressionOption:
	name='context-help-id' Space expression=Expression;

DColorOption returns ExpressionOption:
	name='dcolor' Space expression=Expression
;

DropTargetOption returns NamedOption:
	name='drop-target'
;

FontOption returns ValueOption:
	 name='font' Space value=Number
;

ImageDownOption returns ImagePhrase:
    name='image-down';

ImageUpOption returns  ImagePhrase:
    name= 'image-up' ;

ImageInsensitiveOption returns ImagePhrase:
    name='image-insensitive' ;

ImagePhrase:
	  name=('image-size' | 'image-size-chars' | 'image-size-pixels') Space width=Number Space 'by' Space height=Number 
;

MousePointerOption returns ValueOption:
    name='mouse-pointer' Space value=Name;

LikeOption returns ValueOption:
    name='like' Space value=Name;

PfcColorOption returns ExpressionOption:
    name='pfccolor' Space expression=Expression;
       
NoFocusOption returns NamedOption:
    name='no-focus' (Space 'flat-button')?;
 
NoConvert3DColorsOption returns NamedOption:
    name='no-convert-3d-colors';
    
// END.
Variable:
	KeyVariable Space name=Name
	Space 'as' Space (=>dataType=[Primitive|PrimitiveType] |
	(('class' Space)? dataType=[Interface|ClassName]))
	(Space options+=VariableOption)*;

Property:
	'property' Space name=Name
	Space 'as' Space (=>dataType=[Primitive|PrimitiveType] |
	(('class' Space)? dataType=[Interface|ClassName]))
	(Space options+=VariableOption)*;

Buffer:
	'buffer' Space name=Name Space
	'for' Space ('temp-table' Space)? table=[TableReference|QualifiedName]
	(Space options+=BufferOption)*;
	   
WidgetTrigger:
	'on' Space events+=(Name | STRING) (Space? ',' Space? events+=(Name | STRING))*
	Space (anywhere?='anywhere' Space)?
	(block=Statement |
	('persistent' Space 'run' Space procedure=Name
	(Space 'in' Space in=Expression)?
	(Space? '(' Space? parameters+=Expression Space? (',' parameters+=Expression Space?)* ')')?
	'.'));

DefinitionOption returns Option:
	ShareOption | AccessOption | AbstractOption | StaticOption | OverrideOption | SerializableOption;

VariableOption returns Option:
	InitialOption | NoUndoOption | ExtentOption;

BufferOption returns Option:
	PreselectOption | LabelOption | NamespaceUriOption | NamespacePrefixOption | XmlNodeNameOption;

InitialOption:
	'initial' Space (value+=StaticValue | ('[' Space? value+=StaticValue (Space? ',' Space?
	value+=StaticValue)* Space? ']'));

Reference:
	PropertyReference | LocalReference;

LocalReference returns Reference:
	reference=[ObjectDefinition|Name];

PropertyReference:
	object=[ObjectReference|QualifiedName] ':' reference=[Property|Name];

ExtentOption returns ValueOption:
	name='extent' (Space value=INT)?;

AbstractOption returns NamedOption:
	name='abstract';

StaticOption returns NamedOption:
	name='static';

OverrideOption returns NamedOption:
	name='override';

SerializableOption returns NamedOption:
	name=('serializable' | 'non-serializable');

NoUndoOption returns NamedOption:
	name='no-undo';

PreselectOption returns NamedOption:
	name='preselect';

LabelOption returns ValueOption:
	name='label' Space value=STRING;

NamespaceUriOption returns ValueOption:
	name='namespace-uri' Space value=STRING;

NamespacePrefixOption returns ValueOption:
	name='namespace-prefix' Space value=STRING;

XmlNodeNameOption returns ValueOption:
	name='xml-node-name' Space value=STRING;

StaticValueOption returns ValueOption hidden(WS):
	name=Name '=' value=StaticValue;

AccessOption:
	mode=AccessType;

ShareOption:
	share=ShareType;

Expression:
	StaticExpression;

StaticExpression returns Expression:
	UnknownExpression | LogicalExpression | StringExpression | => NumericExpression | DateExpression;

StaticValue:
	Unknown | Logical | STRING | => Number | Date;

UnknownExpression:
	{UnknownExpression}
	Unknown;

LogicalExpression:
	value?=Logical;

StringExpression:
	value=STRING;

NumericExpression:
	value=Number;

DateExpression:
	value=Date;

PrimitiveType:
	KeyCharacter | 'com-handle' | 'date' | 'datetime' | 'datetime-tz' | KeyDecimal
	| 'handle' | 'int64' | KeyInteger | KeyLogical | 'memptr' | 'raw' | 'recid' | 'rowid';

KeyOperators returns ecore::EString:
	'+' | '-' | '*' | '/' | '=' | 'eq' | '<>' | 'ne' | '>' | 'gt' | '>=' | 'ge' | '<' | 'lt' | '<=' | '+=' | '-=' | '*='
	| '/=' | 'le' | 'and' | 'or' | 'xor' | 'not';

// id or (some) reserved keywords
Name:
	ID | NonReservedKeyword;

WildcardImport hidden():
	QualifiedName '.*';

QualifiedName hidden():
	Name ('.' Name)*;

FileName hidden():
	(ID ":" PathSeparator)? Name (PathSeparator Name)* => ('.' Name);

PathSeparator:
	"/" | "\\";

ShareType returns ShareType:
	('new' Space ('global' Space)?)? 'shared';

ClassName:
	QualifiedName | STRING;

Unknown:
	'?';

Logical:
	'true' | 'false';

Date:
	INT DateSeparator INT (DateSeparator INT)?;

Number:
	('+' | '-')? INT ('.' INT)? | '.' INT;

DateSeparator:
	'/' | '.';

Space:
	(WS | NL)+;

// keyword abbreviations
KeyVariable:
	'variable' | 'variabl' | 'variab' | 'varia' | 'vari' | 'var';

KeyCharacter:
	'character' | 'characte' | 'charact' | 'charac' | 'chara' | 'char';

KeyDecimal:
	'decimal' | 'decima' | 'decim' | 'deci' | 'dec';

KeyInteger:
	'integer' | 'intege' | 'integ' | 'inte' | 'int';

KeyLogical:
	'logical' | 'logica' | 'logic' | 'logi' | 'log';

NonReservedKeyword:
	KeyVariable | PrimitiveType;

enum AccessType:
	private | protected | public |
	package_protected='package-protected' | package_private='package-private';

terminal WS:
	(' ' | '\t')+;

terminal NL:
	'\r'? '\n';

terminal GLOBAL_DEFINE:
	'&global-define' WS (!('\n' | '\r') | '~' NL)+;

terminal SCOPE_DEFINE:
	'&scope-define' WS (!('\n' | '\r') | '~' NL)+;

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal INT returns ecore::EInt:
	('0'..'9')+;

terminal STRING:
	'"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' |
	"'" ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* (NL)?;
