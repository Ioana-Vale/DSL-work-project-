/*
 * generated by Xtext 2.35.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDomainModel
entryRuleDomainModel
:
{ before(grammarAccess.getDomainModelRule()); }
	 ruleDomainModel
{ after(grammarAccess.getDomainModelRule()); } 
	 EOF 
;

// Rule DomainModel
ruleDomainModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainModelAccess().getStatementsAssignment()); }
		(rule__DomainModel__StatementsAssignment)*
		{ after(grammarAccess.getDomainModelAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportElement
entryRuleImportElement
:
{ before(grammarAccess.getImportElementRule()); }
	 ruleImportElement
{ after(grammarAccess.getImportElementRule()); } 
	 EOF 
;

// Rule ImportElement
ruleImportElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportElementAccess().getGroup()); }
		(rule__ImportElement__Group__0)
		{ after(grammarAccess.getImportElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement
:
{ before(grammarAccess.getExpressionStatementRule()); }
	 ruleExpressionStatement
{ after(grammarAccess.getExpressionStatementRule()); } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionStatementAccess().getGroup()); }
		(rule__ExpressionStatement__Group__0)
		{ after(grammarAccess.getExpressionStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAugmentedAssignment
entryRuleAugmentedAssignment
:
{ before(grammarAccess.getAugmentedAssignmentRule()); }
	 ruleAugmentedAssignment
{ after(grammarAccess.getAugmentedAssignmentRule()); } 
	 EOF 
;

// Rule AugmentedAssignment
ruleAugmentedAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAugmentedAssignmentAccess().getGroup()); }
		(rule__AugmentedAssignment__Group__0)
		{ after(grammarAccess.getAugmentedAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression
:
{ before(grammarAccess.getLogicalExpressionRule()); }
	 ruleLogicalExpression
{ after(grammarAccess.getLogicalExpressionRule()); } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getGroup()); }
		(rule__LogicalExpression__Group__0)
		{ after(grammarAccess.getLogicalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
		(rule__ComparisonExpression__Group__0)
		{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression
:
{ before(grammarAccess.getArithmeticExpressionRule()); }
	 ruleArithmeticExpression
{ after(grammarAccess.getArithmeticExpressionRule()); } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticExpressionAccess().getGroup()); }
		(rule__ArithmeticExpression__Group__0)
		{ after(grammarAccess.getArithmeticExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression
:
{ before(grammarAccess.getMultiplicationExpressionRule()); }
	 ruleMultiplicationExpression
{ after(grammarAccess.getMultiplicationExpressionRule()); } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup()); }
		(rule__MultiplicationExpression__Group__0)
		{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExponentiationExpression
entryRuleExponentiationExpression
:
{ before(grammarAccess.getExponentiationExpressionRule()); }
	 ruleExponentiationExpression
{ after(grammarAccess.getExponentiationExpressionRule()); } 
	 EOF 
;

// Rule ExponentiationExpression
ruleExponentiationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExponentiationExpressionAccess().getGroup()); }
		(rule__ExponentiationExpression__Group__0)
		{ after(grammarAccess.getExponentiationExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePostfixOperator
entryRulePostfixOperator
:
{ before(grammarAccess.getPostfixOperatorRule()); }
	 rulePostfixOperator
{ after(grammarAccess.getPostfixOperatorRule()); } 
	 EOF 
;

// Rule PostfixOperator
rulePostfixOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPostfixOperatorAccess().getGroup()); }
		(rule__PostfixOperator__Group__0)
		{ after(grammarAccess.getPostfixOperatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefixOperator
entryRulePrefixOperator
:
{ before(grammarAccess.getPrefixOperatorRule()); }
	 rulePrefixOperator
{ after(grammarAccess.getPrefixOperatorRule()); } 
	 EOF 
;

// Rule PrefixOperator
rulePrefixOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixOperatorAccess().getGroup()); }
		(rule__PrefixOperator__Group__0)
		{ after(grammarAccess.getPrefixOperatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnonymousFunction
entryRuleAnonymousFunction
:
{ before(grammarAccess.getAnonymousFunctionRule()); }
	 ruleAnonymousFunction
{ after(grammarAccess.getAnonymousFunctionRule()); } 
	 EOF 
;

// Rule AnonymousFunction
ruleAnonymousFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnonymousFunctionAccess().getGroup()); }
		(rule__AnonymousFunction__Group__0)
		{ after(grammarAccess.getAnonymousFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
		(rule__NumberLiteral__ValueAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNUMBER
entryRuleNUMBER
:
{ before(grammarAccess.getNUMBERRule()); }
	 ruleNUMBER
{ after(grammarAccess.getNUMBERRule()); } 
	 EOF 
;

// Rule NUMBER
ruleNUMBER 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNUMBERAccess().getGroup()); }
		(rule__NUMBER__Group__0)
		{ after(grammarAccess.getNUMBERAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getGroup()); }
		(rule__Boolean__Group__0)
		{ after(grammarAccess.getBooleanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotBoolean
entryRuleNotBoolean
:
{ before(grammarAccess.getNotBooleanRule()); }
	 ruleNotBoolean
{ after(grammarAccess.getNotBooleanRule()); } 
	 EOF 
;

// Rule NotBoolean
ruleNotBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotBooleanAccess().getGroup()); }
		(rule__NotBoolean__Group__0)
		{ after(grammarAccess.getNotBooleanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
		(rule__StringLiteral__ValueAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCharLiteral
entryRuleCharLiteral
:
{ before(grammarAccess.getCharLiteralRule()); }
	 ruleCharLiteral
{ after(grammarAccess.getCharLiteralRule()); } 
	 EOF 
;

// Rule CharLiteral
ruleCharLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCharLiteralAccess().getValueAssignment()); }
		(rule__CharLiteral__ValueAssignment)
		{ after(grammarAccess.getCharLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableReference
entryRuleVariableReference
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableReferenceAccess().getNameAssignment()); }
		(rule__VariableReference__NameAssignment)
		{ after(grammarAccess.getVariableReferenceAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator
:
{ before(grammarAccess.getComparisonOperatorRule()); }
	 ruleComparisonOperator
{ after(grammarAccess.getComparisonOperatorRule()); } 
	 EOF 
;

// Rule ComparisonOperator
ruleComparisonOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
		(rule__ComparisonOperator__Alternatives)
		{ after(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
		(rule__LogicalOperator__Alternatives)
		{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicationOperator
entryRuleMultiplicationOperator
:
{ before(grammarAccess.getMultiplicationOperatorRule()); }
	 ruleMultiplicationOperator
{ after(grammarAccess.getMultiplicationOperatorRule()); } 
	 EOF 
;

// Rule MultiplicationOperator
ruleMultiplicationOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationOperatorAccess().getAlternatives()); }
		(rule__MultiplicationOperator__Alternatives)
		{ after(grammarAccess.getMultiplicationOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticOperator
entryRuleArithmeticOperator
:
{ before(grammarAccess.getArithmeticOperatorRule()); }
	 ruleArithmeticOperator
{ after(grammarAccess.getArithmeticOperatorRule()); } 
	 EOF 
;

// Rule ArithmeticOperator
ruleArithmeticOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
		(rule__ArithmeticOperator__Alternatives)
		{ after(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExponentiationOperator
entryRuleExponentiationOperator
:
{ before(grammarAccess.getExponentiationOperatorRule()); }
	 ruleExponentiationOperator
{ after(grammarAccess.getExponentiationOperatorRule()); } 
	 EOF 
;

// Rule ExponentiationOperator
ruleExponentiationOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExponentiationOperatorAccess().getAsteriskAsteriskKeyword()); }
		'**'
		{ after(grammarAccess.getExponentiationOperatorAccess().getAsteriskAsteriskKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAugmentedOperator
entryRuleAugmentedOperator
:
{ before(grammarAccess.getAugmentedOperatorRule()); }
	 ruleAugmentedOperator
{ after(grammarAccess.getAugmentedOperatorRule()); } 
	 EOF 
;

// Rule AugmentedOperator
ruleAugmentedOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAugmentedOperatorAccess().getAlternatives()); }
		(rule__AugmentedOperator__Alternatives)
		{ after(grammarAccess.getAugmentedOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForLoop
entryRuleForLoop
:
{ before(grammarAccess.getForLoopRule()); }
	 ruleForLoop
{ after(grammarAccess.getForLoopRule()); } 
	 EOF 
;

// Rule ForLoop
ruleForLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForLoopAccess().getGroup()); }
		(rule__ForLoop__Group__0)
		{ after(grammarAccess.getForLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop
:
{ before(grammarAccess.getWhileLoopRule()); }
	 ruleWhileLoop
{ after(grammarAccess.getWhileLoopRule()); } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileLoopAccess().getGroup()); }
		(rule__WhileLoop__Group__0)
		{ after(grammarAccess.getWhileLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoWhileLoop
entryRuleDoWhileLoop
:
{ before(grammarAccess.getDoWhileLoopRule()); }
	 ruleDoWhileLoop
{ after(grammarAccess.getDoWhileLoopRule()); } 
	 EOF 
;

// Rule DoWhileLoop
ruleDoWhileLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoWhileLoopAccess().getGroup()); }
		(rule__DoWhileLoop__Group__0)
		{ after(grammarAccess.getDoWhileLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContinueStatement
entryRuleContinueStatement
:
{ before(grammarAccess.getContinueStatementRule()); }
	 ruleContinueStatement
{ after(grammarAccess.getContinueStatementRule()); } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContinueStatementAccess().getGroup()); }
		(rule__ContinueStatement__Group__0)
		{ after(grammarAccess.getContinueStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBreakStatement
entryRuleBreakStatement
:
{ before(grammarAccess.getBreakStatementRule()); }
	 ruleBreakStatement
{ after(grammarAccess.getBreakStatementRule()); } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBreakStatementAccess().getGroup()); }
		(rule__BreakStatement__Group__0)
		{ after(grammarAccess.getBreakStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
		(rule__FunctionDeclaration__Group__0)
		{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionReturn
entryRuleFunctionReturn
:
{ before(grammarAccess.getFunctionReturnRule()); }
	 ruleFunctionReturn
{ after(grammarAccess.getFunctionReturnRule()); } 
	 EOF 
;

// Rule FunctionReturn
ruleFunctionReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionReturnAccess().getGroup()); }
		(rule__FunctionReturn__Group__0)
		{ after(grammarAccess.getFunctionReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConsoleLogStatement
entryRuleConsoleLogStatement
:
{ before(grammarAccess.getConsoleLogStatementRule()); }
	 ruleConsoleLogStatement
{ after(grammarAccess.getConsoleLogStatementRule()); } 
	 EOF 
;

// Rule ConsoleLogStatement
ruleConsoleLogStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConsoleLogStatementAccess().getGroup()); }
		(rule__ConsoleLogStatement__Group__0)
		{ after(grammarAccess.getConsoleLogStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTryCatchStatement
entryRuleTryCatchStatement
:
{ before(grammarAccess.getTryCatchStatementRule()); }
	 ruleTryCatchStatement
{ after(grammarAccess.getTryCatchStatementRule()); } 
	 EOF 
;

// Rule TryCatchStatement
ruleTryCatchStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTryCatchStatementAccess().getGroup()); }
		(rule__TryCatchStatement__Group__0)
		{ after(grammarAccess.getTryCatchStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement
:
{ before(grammarAccess.getSwitchStatementRule()); }
	 ruleSwitchStatement
{ after(grammarAccess.getSwitchStatementRule()); } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchStatementAccess().getGroup()); }
		(rule__SwitchStatement__Group__0)
		{ after(grammarAccess.getSwitchStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCase
entryRuleCase
:
{ before(grammarAccess.getCaseRule()); }
	 ruleCase
{ after(grammarAccess.getCaseRule()); } 
	 EOF 
;

// Rule Case
ruleCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseAccess().getGroup()); }
		(rule__Case__Group__0)
		{ after(grammarAccess.getCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefault
entryRuleDefault
:
{ before(grammarAccess.getDefaultRule()); }
	 ruleDefault
{ after(grammarAccess.getDefaultRule()); } 
	 EOF 
;

// Rule Default
ruleDefault 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefaultAccess().getGroup()); }
		(rule__Default__Group__0)
		{ after(grammarAccess.getDefaultAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringManipulationStatement
entryRuleStringManipulationStatement
:
{ before(grammarAccess.getStringManipulationStatementRule()); }
	 ruleStringManipulationStatement
{ after(grammarAccess.getStringManipulationStatementRule()); } 
	 EOF 
;

// Rule StringManipulationStatement
ruleStringManipulationStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringManipulationStatementAccess().getGroup()); }
		(rule__StringManipulationStatement__Group__0)
		{ after(grammarAccess.getStringManipulationStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringManipulationFunctionCall
entryRuleStringManipulationFunctionCall
:
{ before(grammarAccess.getStringManipulationFunctionCallRule()); }
	 ruleStringManipulationFunctionCall
{ after(grammarAccess.getStringManipulationFunctionCallRule()); } 
	 EOF 
;

// Rule StringManipulationFunctionCall
ruleStringManipulationFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringManipulationFunctionCallAccess().getAlternatives()); }
		(rule__StringManipulationFunctionCall__Alternatives)
		{ after(grammarAccess.getStringManipulationFunctionCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSplitFunctionCall
entryRuleSplitFunctionCall
:
{ before(grammarAccess.getSplitFunctionCallRule()); }
	 ruleSplitFunctionCall
{ after(grammarAccess.getSplitFunctionCallRule()); } 
	 EOF 
;

// Rule SplitFunctionCall
ruleSplitFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSplitFunctionCallAccess().getGroup()); }
		(rule__SplitFunctionCall__Group__0)
		{ after(grammarAccess.getSplitFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJoinFunctionCall
entryRuleJoinFunctionCall
:
{ before(grammarAccess.getJoinFunctionCallRule()); }
	 ruleJoinFunctionCall
{ after(grammarAccess.getJoinFunctionCallRule()); } 
	 EOF 
;

// Rule JoinFunctionCall
ruleJoinFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJoinFunctionCallAccess().getGroup()); }
		(rule__JoinFunctionCall__Group__0)
		{ after(grammarAccess.getJoinFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSliceFunctionCall
entryRuleSliceFunctionCall
:
{ before(grammarAccess.getSliceFunctionCallRule()); }
	 ruleSliceFunctionCall
{ after(grammarAccess.getSliceFunctionCallRule()); } 
	 EOF 
;

// Rule SliceFunctionCall
ruleSliceFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSliceFunctionCallAccess().getGroup()); }
		(rule__SliceFunctionCall__Group__0)
		{ after(grammarAccess.getSliceFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleThrowStatement
entryRuleThrowStatement
:
{ before(grammarAccess.getThrowStatementRule()); }
	 ruleThrowStatement
{ after(grammarAccess.getThrowStatementRule()); } 
	 EOF 
;

// Rule ThrowStatement
ruleThrowStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getThrowStatementAccess().getGroup()); }
		(rule__ThrowStatement__Group__0)
		{ after(grammarAccess.getThrowStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Type
ruleType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getGroup_1_0_0()); }
		(rule__Import__Group_1_0_0__0)
		{ after(grammarAccess.getImportAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getImportAccess().getGroup_1_0_1()); }
		(rule__Import__Group_1_0_1__0)
		{ after(grammarAccess.getImportAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportElement__ElementAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportElementAccess().getElementIDTerminalRuleCall_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getImportElementAccess().getElementIDTerminalRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getImportElementAccess().getElementAsteriskKeyword_0_0_1()); }
		'*'
		{ after(grammarAccess.getImportElementAccess().getElementAsteriskKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getImportElementAccess().getElementSTRINGTerminalRuleCall_0_0_2()); }
		RULE_STRING
		{ after(grammarAccess.getImportElementAccess().getElementSTRINGTerminalRuleCall_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_1()); }
		ruleExpressionStatement
		{ after(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2()); }
		ruleIfStatement
		{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForLoopParserRuleCall_3()); }
		ruleForLoop
		{ after(grammarAccess.getStatementAccess().getForLoopParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_4()); }
		ruleWhileLoop
		{ after(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDoWhileLoopParserRuleCall_5()); }
		ruleDoWhileLoop
		{ after(grammarAccess.getStatementAccess().getDoWhileLoopParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_6()); }
		ruleContinueStatement
		{ after(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_7()); }
		ruleBreakStatement
		{ after(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFunctionDeclarationParserRuleCall_8()); }
		ruleFunctionDeclaration
		{ after(grammarAccess.getStatementAccess().getFunctionDeclarationParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_9()); }
		ruleFunctionCall
		{ after(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFunctionReturnParserRuleCall_10()); }
		ruleFunctionReturn
		{ after(grammarAccess.getStatementAccess().getFunctionReturnParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getConsoleLogStatementParserRuleCall_11()); }
		ruleConsoleLogStatement
		{ after(grammarAccess.getStatementAccess().getConsoleLogStatementParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTryCatchStatementParserRuleCall_12()); }
		ruleTryCatchStatement
		{ after(grammarAccess.getStatementAccess().getTryCatchStatementParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_13()); }
		ruleSwitchStatement
		{ after(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_13()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getStringManipulationStatementParserRuleCall_14()); }
		ruleStringManipulationStatement
		{ after(grammarAccess.getStatementAccess().getStringManipulationStatementParserRuleCall_14()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getThrowStatementParserRuleCall_15()); }
		ruleThrowStatement
		{ after(grammarAccess.getStatementAccess().getThrowStatementParserRuleCall_15()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getImportParserRuleCall_16()); }
		ruleImport
		{ after(grammarAccess.getStatementAccess().getImportParserRuleCall_16()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall_0()); }
		ruleLogicalExpression
		{ after(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getPostfixOperatorParserRuleCall_1()); }
		rulePostfixOperator
		{ after(grammarAccess.getExpressionAccess().getPostfixOperatorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getPrefixOperatorParserRuleCall_2()); }
		rulePrefixOperator
		{ after(grammarAccess.getExpressionAccess().getPrefixOperatorParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getAugmentedAssignmentParserRuleCall_3()); }
		ruleAugmentedAssignment
		{ after(grammarAccess.getExpressionAccess().getAugmentedAssignmentParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_1()); }
		ruleNumberLiteral
		{ after(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getStringLiteralParserRuleCall_2()); }
		ruleStringLiteral
		{ after(grammarAccess.getPrimaryAccess().getStringLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getCharLiteralParserRuleCall_3()); }
		ruleCharLiteral
		{ after(grammarAccess.getPrimaryAccess().getCharLiteralParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getVariableReferenceParserRuleCall_4()); }
		ruleVariableReference
		{ after(grammarAccess.getPrimaryAccess().getVariableReferenceParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getAnonymousFunctionParserRuleCall_5()); }
		ruleAnonymousFunction
		{ after(grammarAccess.getPrimaryAccess().getAnonymousFunctionParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getBooleanParserRuleCall_6()); }
		ruleBoolean
		{ after(grammarAccess.getPrimaryAccess().getBooleanParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNotBooleanParserRuleCall_7()); }
		ruleNotBoolean
		{ after(grammarAccess.getPrimaryAccess().getNotBooleanParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperator__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostfixOperatorAccess().getPlusSignPlusSignKeyword_1_0()); }
		'++'
		{ after(grammarAccess.getPostfixOperatorAccess().getPlusSignPlusSignKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPostfixOperatorAccess().getHyphenMinusHyphenMinusKeyword_1_1()); }
		'--'
		{ after(grammarAccess.getPostfixOperatorAccess().getHyphenMinusHyphenMinusKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixOperator__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixOperatorAccess().getPlusSignPlusSignKeyword_0_0()); }
		'++'
		{ after(grammarAccess.getPrefixOperatorAccess().getPlusSignPlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrefixOperatorAccess().getHyphenMinusHyphenMinusKeyword_0_1()); }
		'--'
		{ after(grammarAccess.getPrefixOperatorAccess().getHyphenMinusHyphenMinusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__ValueAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getValueTrueKeyword_1_0_0()); }
		'true'
		{ after(grammarAccess.getBooleanAccess().getValueTrueKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0_1()); }
		'false'
		{ after(grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getValueNullKeyword_1_0_2()); }
		'null'
		{ after(grammarAccess.getBooleanAccess().getValueNullKeyword_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getLessThanSignEqualsSignKeyword_0()); }
		'<='
		{ after(grammarAccess.getComparisonOperatorAccess().getLessThanSignEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getLessThanSignKeyword_1()); }
		'<'
		{ after(grammarAccess.getComparisonOperatorAccess().getLessThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }
		'>='
		{ after(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignKeyword_3()); }
		'>'
		{ after(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getExclamationMarkEqualsSignKeyword_4()); }
		'!='
		{ after(grammarAccess.getComparisonOperatorAccess().getExclamationMarkEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getEqualsSignEqualsSignKeyword_5()); }
		'=='
		{ after(grammarAccess.getComparisonOperatorAccess().getEqualsSignEqualsSignKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getEqualsSignKeyword_6()); }
		'='
		{ after(grammarAccess.getComparisonOperatorAccess().getEqualsSignKeyword_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getAmpersandAmpersandKeyword_0()); }
		'&&'
		{ after(grammarAccess.getLogicalOperatorAccess().getAmpersandAmpersandKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }
		'||'
		{ after(grammarAccess.getLogicalOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationOperatorAccess().getAsteriskKeyword_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationOperatorAccess().getAsteriskKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationOperatorAccess().getSolidusKeyword_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationOperatorAccess().getSolidusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationOperatorAccess().getPercentSignKeyword_2()); }
		'%'
		{ after(grammarAccess.getMultiplicationOperatorAccess().getPercentSignKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getArithmeticOperatorAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getArithmeticOperatorAccess().getHyphenMinusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AugmentedOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAugmentedOperatorAccess().getPlusSignEqualsSignKeyword_0()); }
		'+='
		{ after(grammarAccess.getAugmentedOperatorAccess().getPlusSignEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAugmentedOperatorAccess().getHyphenMinusEqualsSignKeyword_1()); }
		'-='
		{ after(grammarAccess.getAugmentedOperatorAccess().getHyphenMinusEqualsSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getAugmentedOperatorAccess().getAsteriskEqualsSignKeyword_2()); }
		'*='
		{ after(grammarAccess.getAugmentedOperatorAccess().getAsteriskEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getAugmentedOperatorAccess().getSolidusEqualsSignKeyword_3()); }
		'/='
		{ after(grammarAccess.getAugmentedOperatorAccess().getSolidusEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getAugmentedOperatorAccess().getPercentSignEqualsSignKeyword_4()); }
		'%='
		{ after(grammarAccess.getAugmentedOperatorAccess().getPercentSignEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getAugmentedOperatorAccess().getAsteriskAsteriskEqualsSignKeyword_5()); }
		'**='
		{ after(grammarAccess.getAugmentedOperatorAccess().getAsteriskAsteriskEqualsSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringManipulationFunctionCall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringManipulationFunctionCallAccess().getSplitFunctionCallParserRuleCall_0()); }
		ruleSplitFunctionCall
		{ after(grammarAccess.getStringManipulationFunctionCallAccess().getSplitFunctionCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringManipulationFunctionCallAccess().getJoinFunctionCallParserRuleCall_1()); }
		ruleJoinFunctionCall
		{ after(grammarAccess.getStringManipulationFunctionCallAccess().getJoinFunctionCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStringManipulationFunctionCallAccess().getSliceFunctionCallParserRuleCall_2()); }
		ruleSliceFunctionCall
		{ after(grammarAccess.getStringManipulationFunctionCallAccess().getSliceFunctionCallParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getIntEnumLiteralDeclaration_0()); }
		('int')
		{ after(grammarAccess.getTypeAccess().getIntEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_1()); }
		('String')
		{ after(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getCharEnumLiteralDeclaration_2()); }
		('char')
		{ after(grammarAccess.getTypeAccess().getCharEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getLetEnumLiteralDeclaration_3()); }
		('let')
		{ after(grammarAccess.getTypeAccess().getLetEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_4()); }
		('boolean')
		{ after(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getFloatEnumLiteralDeclaration_5()); }
		('float')
		{ after(grammarAccess.getTypeAccess().getFloatEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getVarEnumLiteralDeclaration_6()); }
		('var')
		{ after(grammarAccess.getTypeAccess().getVarEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getConstEnumLiteralDeclaration_7()); }
		('const')
		{ after(grammarAccess.getTypeAccess().getConstEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_8()); }
		('void')
		{ after(grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getGroup_1()); }
	(rule__Import__Group_1__0)?
	{ after(grammarAccess.getImportAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportURIAssignment_2()); }
	(rule__Import__ImportURIAssignment_2)
	{ after(grammarAccess.getImportAccess().getImportURIAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1__0__Impl
	rule__Import__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getImportAccess().getAlternatives_1_0()); }
		(rule__Import__Alternatives_1_0)
		{ after(grammarAccess.getImportAccess().getAlternatives_1_0()); }
	)
	(
		{ before(grammarAccess.getImportAccess().getAlternatives_1_0()); }
		(rule__Import__Alternatives_1_0)*
		{ after(grammarAccess.getImportAccess().getAlternatives_1_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getFromKeyword_1_1()); }
	'from'
	{ after(grammarAccess.getImportAccess().getFromKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0_0__0__Impl
	rule__Import__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedElementAssignment_1_0_0_0()); }
	(rule__Import__ImportedElementAssignment_1_0_0_0)
	{ after(grammarAccess.getImportAccess().getImportedElementAssignment_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getCommaKeyword_1_0_0_1()); }
	(',')?
	{ after(grammarAccess.getImportAccess().getCommaKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0_1__0__Impl
	rule__Import__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1_0_1_0()); }
	'{'
	{ after(grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0_1__1__Impl
	rule__Import__Group_1_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getGroup_1_0_1_1()); }
	(rule__Import__Group_1_0_1_1__0)?
	{ after(grammarAccess.getImportAccess().getGroup_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getRightCurlyBracketKeyword_1_0_1_2()); }
	'}'
	{ after(grammarAccess.getImportAccess().getRightCurlyBracketKeyword_1_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group_1_0_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0_1_1__0__Impl
	rule__Import__Group_1_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedElementsAssignment_1_0_1_1_0()); }
	(rule__Import__ImportedElementsAssignment_1_0_1_1_0)
	{ after(grammarAccess.getImportAccess().getImportedElementsAssignment_1_0_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getGroup_1_0_1_1_1()); }
	(rule__Import__Group_1_0_1_1_1__0)*
	{ after(grammarAccess.getImportAccess().getGroup_1_0_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group_1_0_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0_1_1_1__0__Impl
	rule__Import__Group_1_0_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getCommaKeyword_1_0_1_1_1_0()); }
	','
	{ after(grammarAccess.getImportAccess().getCommaKeyword_1_0_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1_0_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedElementsAssignment_1_0_1_1_1_1()); }
	(rule__Import__ImportedElementsAssignment_1_0_1_1_1_1)
	{ after(grammarAccess.getImportAccess().getImportedElementsAssignment_1_0_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportElement__Group__0__Impl
	rule__ImportElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportElementAccess().getElementAssignment_0()); }
	(rule__ImportElement__ElementAssignment_0)
	{ after(grammarAccess.getImportElementAccess().getElementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportElementAccess().getGroup_1()); }
	(rule__ImportElement__Group_1__0)?
	{ after(grammarAccess.getImportElementAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportElement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportElement__Group_1__0__Impl
	rule__ImportElement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportElement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportElementAccess().getAsKeyword_1_0()); }
	'as'
	{ after(grammarAccess.getImportElementAccess().getAsKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportElement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportElement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportElement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportElementAccess().getAliasAssignment_1_1()); }
	(rule__ImportElement__AliasAssignment_1_1)
	{ after(grammarAccess.getImportElementAccess().getAliasAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	(rule__Block__StatementsAssignment_1)*
	{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0()); }
	(rule__VariableDeclaration__TypeAssignment_0)
	{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getGroup_2()); }
	(rule__VariableDeclaration__Group_2__0)?
	{ after(grammarAccess.getVariableDeclarationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group_2__0__Impl
	rule__VariableDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2_0()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getExprAssignment_2_1()); }
	(rule__VariableDeclaration__ExprAssignment_2_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getExprAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionStatement__Group__0__Impl
	rule__ExpressionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionStatementAccess().getExprAssignment_0()); }
	(rule__ExpressionStatement__ExprAssignment_0)
	{ after(grammarAccess.getExpressionStatementAccess().getExprAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AugmentedAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AugmentedAssignment__Group__0__Impl
	rule__AugmentedAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AugmentedAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAugmentedAssignmentAccess().getVariableReferenceParserRuleCall_0()); }
	ruleVariableReference
	{ after(grammarAccess.getAugmentedAssignmentAccess().getVariableReferenceParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AugmentedAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AugmentedAssignment__Group__1__Impl
	rule__AugmentedAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AugmentedAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAugmentedAssignmentAccess().getAugmentedOperatorParserRuleCall_1()); }
	ruleAugmentedOperator
	{ after(grammarAccess.getAugmentedAssignmentAccess().getAugmentedOperatorParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AugmentedAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AugmentedAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AugmentedAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAugmentedAssignmentAccess().getExprAssignment_2()); }
	(rule__AugmentedAssignment__ExprAssignment_2)
	{ after(grammarAccess.getAugmentedAssignmentAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group__0__Impl
	rule__LogicalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
	{ after(grammarAccess.getLogicalExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getGroup_1()); }
	(rule__LogicalExpression__Group_1__0)*
	{ after(grammarAccess.getLogicalExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group_1__0__Impl
	rule__LogicalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getGroup_1_0()); }
	(rule__LogicalExpression__Group_1_0__0)
	{ after(grammarAccess.getLogicalExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1_1()); }
	(rule__LogicalExpression__RightAssignment_1_1)
	{ after(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group_1_0__0__Impl
	rule__LogicalExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getLogicalExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getLogicalExpressionAccess().getLogicalExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getLogicalOperatorParserRuleCall_1_0_1()); }
	ruleLogicalOperator
	{ after(grammarAccess.getLogicalExpressionAccess().getLogicalOperatorParserRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getArithmeticExpressionParserRuleCall_0()); }
	ruleArithmeticExpression
	{ after(grammarAccess.getComparisonExpressionAccess().getArithmeticExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
	(rule__ComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getComparisonOperatorParserRuleCall_1_1()); }
	ruleComparisonOperator
	{ after(grammarAccess.getComparisonExpressionAccess().getComparisonOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
	(rule__ComparisonExpression__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticExpression__Group__0__Impl
	rule__ArithmeticExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
	ruleMultiplicationExpression
	{ after(grammarAccess.getArithmeticExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticExpressionAccess().getGroup_1()); }
	(rule__ArithmeticExpression__Group_1__0)*
	{ after(grammarAccess.getArithmeticExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticExpression__Group_1__0__Impl
	rule__ArithmeticExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticExpressionAccess().getArithmeticExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getArithmeticExpressionAccess().getArithmeticExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticExpression__Group_1__1__Impl
	rule__ArithmeticExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticExpressionAccess().getArithmeticOperatorParserRuleCall_1_1()); }
	ruleArithmeticOperator
	{ after(grammarAccess.getArithmeticExpressionAccess().getArithmeticOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticExpressionAccess().getRightAssignment_1_2()); }
	(rule__ArithmeticExpression__RightAssignment_1_2)
	{ after(grammarAccess.getArithmeticExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExpression__Group__0__Impl
	rule__MultiplicationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpressionAccess().getExponentiationExpressionParserRuleCall_0()); }
	ruleExponentiationExpression
	{ after(grammarAccess.getMultiplicationExpressionAccess().getExponentiationExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
	(rule__MultiplicationExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExpression__Group_1__0__Impl
	rule__MultiplicationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpressionAccess().getMultiplicationExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationExpressionAccess().getMultiplicationExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExpression__Group_1__1__Impl
	rule__MultiplicationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpressionAccess().getMultiplicationOperatorParserRuleCall_1_1()); }
	ruleMultiplicationOperator
	{ after(grammarAccess.getMultiplicationExpressionAccess().getMultiplicationOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_2()); }
	(rule__MultiplicationExpression__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentiationExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group__0__Impl
	rule__ExponentiationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getExponentiationExpressionAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getGroup_1()); }
	(rule__ExponentiationExpression__Group_1__0)*
	{ after(grammarAccess.getExponentiationExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentiationExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group_1__0__Impl
	rule__ExponentiationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getExponentiationExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExponentiationExpressionAccess().getExponentiationExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group_1__1__Impl
	rule__ExponentiationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getExponentiationOperatorParserRuleCall_1_1()); }
	ruleExponentiationOperator
	{ after(grammarAccess.getExponentiationExpressionAccess().getExponentiationOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentiationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentiationExpressionAccess().getRightAssignment_1_2()); }
	(rule__ExponentiationExpression__RightAssignment_1_2)
	{ after(grammarAccess.getExponentiationExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostfixOperator__Group__0__Impl
	rule__PostfixOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostfixOperatorAccess().getVariableReferenceParserRuleCall_0()); }
	ruleVariableReference
	{ after(grammarAccess.getPostfixOperatorAccess().getVariableReferenceParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostfixOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostfixOperatorAccess().getAlternatives_1()); }
	(rule__PostfixOperator__Alternatives_1)
	{ after(grammarAccess.getPostfixOperatorAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixOperator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixOperator__Group__0__Impl
	rule__PrefixOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixOperator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixOperatorAccess().getAlternatives_0()); }
	(rule__PrefixOperator__Alternatives_0)
	{ after(grammarAccess.getPrefixOperatorAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixOperator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixOperator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixOperatorAccess().getVariableReferenceParserRuleCall_1()); }
	ruleVariableReference
	{ after(grammarAccess.getPrefixOperatorAccess().getVariableReferenceParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnonymousFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousFunction__Group__0__Impl
	rule__AnonymousFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFunctionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getAnonymousFunctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousFunction__Group__1__Impl
	rule__AnonymousFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFunctionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getAnonymousFunctionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousFunction__Group__2__Impl
	rule__AnonymousFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFunctionAccess().getGroup_2()); }
	(rule__AnonymousFunction__Group_2__0)?
	{ after(grammarAccess.getAnonymousFunctionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousFunction__Group__3__Impl
	rule__AnonymousFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFunctionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getAnonymousFunctionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFunctionAccess().getBodyAssignment_4()); }
	(rule__AnonymousFunction__BodyAssignment_4)
	{ after(grammarAccess.getAnonymousFunctionAccess().getBodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnonymousFunction__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousFunction__Group_2__0__Impl
	rule__AnonymousFunction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFunctionAccess().getParametersAssignment_2_0()); }
	(rule__AnonymousFunction__ParametersAssignment_2_0)
	{ after(grammarAccess.getAnonymousFunctionAccess().getParametersAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousFunction__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFunctionAccess().getGroup_2_1()); }
	(rule__AnonymousFunction__Group_2_1__0)*
	{ after(grammarAccess.getAnonymousFunctionAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnonymousFunction__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousFunction__Group_2_1__0__Impl
	rule__AnonymousFunction__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFunctionAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getAnonymousFunctionAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousFunction__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFunctionAccess().getParametersAssignment_2_1_1()); }
	(rule__AnonymousFunction__ParametersAssignment_2_1_1)
	{ after(grammarAccess.getAnonymousFunctionAccess().getParametersAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group__0__Impl
	rule__NUMBER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getGroup_1()); }
	(rule__NUMBER__Group_1__0)?
	{ after(grammarAccess.getNUMBERAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group_1__0__Impl
	rule__NUMBER__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getNUMBERAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
	{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Boolean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group__0__Impl
	rule__Boolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getBooleanAction_0()); }
	()
	{ after(grammarAccess.getBooleanAccess().getBooleanAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getValueAssignment_1()); }
	(rule__Boolean__ValueAssignment_1)
	{ after(grammarAccess.getBooleanAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotBoolean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotBoolean__Group__0__Impl
	rule__NotBoolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotBoolean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotBooleanAccess().getNotBooleanAction_0()); }
	()
	{ after(grammarAccess.getNotBooleanAccess().getNotBooleanAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotBoolean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotBoolean__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotBoolean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotBooleanAccess().getValueAssignment_1()); }
	(rule__NotBoolean__ValueAssignment_1)
	{ after(grammarAccess.getNotBooleanAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
	(rule__IfStatement__ConditionAssignment_2)
	{ after(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getThenBranchAssignment_4()); }
	(rule__IfStatement__ThenBranchAssignment_4)
	{ after(grammarAccess.getIfStatementAccess().getThenBranchAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_5()); }
	(rule__IfStatement__Group_5__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__0__Impl
	rule__IfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
	'else'
	{ after(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseBranchAssignment_5_1()); }
	(rule__IfStatement__ElseBranchAssignment_5_1)
	{ after(grammarAccess.getIfStatementAccess().getElseBranchAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__0__Impl
	rule__ForLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForLoopAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__1__Impl
	rule__ForLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__2__Impl
	rule__ForLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getInitializationAssignment_2()); }
	(rule__ForLoop__InitializationAssignment_2)
	{ after(grammarAccess.getForLoopAccess().getInitializationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__3__Impl
	rule__ForLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getForLoopAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__4__Impl
	rule__ForLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getConditionAssignment_4()); }
	(rule__ForLoop__ConditionAssignment_4)
	{ after(grammarAccess.getForLoopAccess().getConditionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__5__Impl
	rule__ForLoop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getForLoopAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__6__Impl
	rule__ForLoop__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getIncrementAssignment_6()); }
	(rule__ForLoop__IncrementAssignment_6)
	{ after(grammarAccess.getForLoopAccess().getIncrementAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__7__Impl
	rule__ForLoop__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getForLoopAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getBodyAssignment_8()); }
	(rule__ForLoop__BodyAssignment_8)
	{ after(grammarAccess.getForLoopAccess().getBodyAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__0__Impl
	rule__WhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__1__Impl
	rule__WhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__2__Impl
	rule__WhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getConditionAssignment_2()); }
	(rule__WhileLoop__ConditionAssignment_2)
	{ after(grammarAccess.getWhileLoopAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__3__Impl
	rule__WhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getBodyAssignment_4()); }
	(rule__WhileLoop__BodyAssignment_4)
	{ after(grammarAccess.getWhileLoopAccess().getBodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileLoop__Group__0__Impl
	rule__DoWhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileLoopAccess().getDoKeyword_0()); }
	'do'
	{ after(grammarAccess.getDoWhileLoopAccess().getDoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileLoop__Group__1__Impl
	rule__DoWhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileLoopAccess().getBodyAssignment_1()); }
	(rule__DoWhileLoop__BodyAssignment_1)
	{ after(grammarAccess.getDoWhileLoopAccess().getBodyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileLoop__Group__2__Impl
	rule__DoWhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2()); }
	'while'
	{ after(grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileLoop__Group__3__Impl
	rule__DoWhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileLoop__Group__4__Impl
	rule__DoWhileLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileLoopAccess().getConditionAssignment_4()); }
	(rule__DoWhileLoop__ConditionAssignment_4)
	{ after(grammarAccess.getDoWhileLoopAccess().getConditionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileLoop__Group__5__Impl
	rule__DoWhileLoop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileLoopAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getDoWhileLoopAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileLoop__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileLoopAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getDoWhileLoopAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContinueStatement__Group__0__Impl
	rule__ContinueStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinueStatementAccess().getContinueKeyword_0()); }
	'continue'
	{ after(grammarAccess.getContinueStatementAccess().getContinueKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContinueStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BreakStatement__Group__0__Impl
	rule__BreakStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakStatementAccess().getBreakKeyword_0()); }
	'break'
	{ after(grammarAccess.getBreakStatementAccess().getBreakKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BreakStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getReturnTypeAssignment_0()); }
	(rule__FunctionDeclaration__ReturnTypeAssignment_0)?
	{ after(grammarAccess.getFunctionDeclarationAccess().getReturnTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1()); }
	'function'
	{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
	(rule__FunctionDeclaration__NameAssignment_2)
	{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
	(rule__FunctionDeclaration__Group_4__0)?
	{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__5__Impl
	rule__FunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_6()); }
	(rule__FunctionDeclaration__BodyAssignment_6)
	{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group_4__0__Impl
	rule__FunctionDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_0()); }
	(rule__FunctionDeclaration__ParametersAssignment_4_0)
	{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1()); }
	(rule__FunctionDeclaration__Group_4_1__0)*
	{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group_4_1__0__Impl
	rule__FunctionDeclaration__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0()); }
	','
	{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_1_1()); }
	(rule__FunctionDeclaration__ParametersAssignment_4_1_1)
	{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
	(rule__FunctionCall__NameAssignment_0)
	{ after(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_2()); }
	(rule__FunctionCall__Group_2__0)?
	{ after(grammarAccess.getFunctionCallAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getFunctionCallAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_2__0__Impl
	rule__FunctionCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_0()); }
	(rule__FunctionCall__ArgumentsAssignment_2_0)
	{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
	(rule__FunctionCall__Group_2_1__0)*
	{ after(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_2_1__0__Impl
	rule__FunctionCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_1_1()); }
	(rule__FunctionCall__ArgumentsAssignment_2_1_1)
	{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionReturn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionReturn__Group__0__Impl
	rule__FunctionReturn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReturn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionReturnAccess().getReturnKeyword_0()); }
	'return'
	{ after(grammarAccess.getFunctionReturnAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReturn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionReturn__Group__1__Impl
	rule__FunctionReturn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReturn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionReturnAccess().getExprAssignment_1()); }
	(rule__FunctionReturn__ExprAssignment_1)
	{ after(grammarAccess.getFunctionReturnAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReturn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionReturn__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReturn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionReturnAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getFunctionReturnAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConsoleLogStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group__0__Impl
	rule__ConsoleLogStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getConsoleLogStatementAction_0()); }
	()
	{ after(grammarAccess.getConsoleLogStatementAccess().getConsoleLogStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group__1__Impl
	rule__ConsoleLogStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getConsoleLogKeyword_1()); }
	'console.log'
	{ after(grammarAccess.getConsoleLogStatementAccess().getConsoleLogKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group__2__Impl
	rule__ConsoleLogStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getConsoleLogStatementAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group__3__Impl
	rule__ConsoleLogStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getGroup_3()); }
	(rule__ConsoleLogStatement__Group_3__0)?
	{ after(grammarAccess.getConsoleLogStatementAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group__4__Impl
	rule__ConsoleLogStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getConsoleLogStatementAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getConsoleLogStatementAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConsoleLogStatement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group_3__0__Impl
	rule__ConsoleLogStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getArgumentsAssignment_3_0()); }
	(rule__ConsoleLogStatement__ArgumentsAssignment_3_0)
	{ after(grammarAccess.getConsoleLogStatementAccess().getArgumentsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getGroup_3_1()); }
	(rule__ConsoleLogStatement__Group_3_1__0)*
	{ after(grammarAccess.getConsoleLogStatementAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConsoleLogStatement__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group_3_1__0__Impl
	rule__ConsoleLogStatement__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getConsoleLogStatementAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsoleLogStatement__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsoleLogStatementAccess().getArgumentsAssignment_3_1_1()); }
	(rule__ConsoleLogStatement__ArgumentsAssignment_3_1_1)
	{ after(grammarAccess.getConsoleLogStatementAccess().getArgumentsAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TryCatchStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TryCatchStatement__Group__0__Impl
	rule__TryCatchStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTryCatchStatementAccess().getTryKeyword_0()); }
	'try'
	{ after(grammarAccess.getTryCatchStatementAccess().getTryKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TryCatchStatement__Group__1__Impl
	rule__TryCatchStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTryCatchStatementAccess().getTryBlockAssignment_1()); }
	(rule__TryCatchStatement__TryBlockAssignment_1)
	{ after(grammarAccess.getTryCatchStatementAccess().getTryBlockAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TryCatchStatement__Group__2__Impl
	rule__TryCatchStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTryCatchStatementAccess().getCatchKeyword_2()); }
	'catch'
	{ after(grammarAccess.getTryCatchStatementAccess().getCatchKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TryCatchStatement__Group__3__Impl
	rule__TryCatchStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTryCatchStatementAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getTryCatchStatementAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TryCatchStatement__Group__4__Impl
	rule__TryCatchStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTryCatchStatementAccess().getExceptionAssignment_4()); }
	(rule__TryCatchStatement__ExceptionAssignment_4)
	{ after(grammarAccess.getTryCatchStatementAccess().getExceptionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TryCatchStatement__Group__5__Impl
	rule__TryCatchStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTryCatchStatementAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getTryCatchStatementAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TryCatchStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTryCatchStatementAccess().getCatchBlockAssignment_6()); }
	(rule__TryCatchStatement__CatchBlockAssignment_6)
	{ after(grammarAccess.getTryCatchStatementAccess().getCatchBlockAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStatement__Group__0__Impl
	rule__SwitchStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); }
	'switch'
	{ after(grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStatement__Group__1__Impl
	rule__SwitchStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStatement__Group__2__Impl
	rule__SwitchStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); }
	(rule__SwitchStatement__ExpressionAssignment_2)
	{ after(grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStatement__Group__3__Impl
	rule__SwitchStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStatement__Group__4__Impl
	rule__SwitchStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStatement__Group__5__Impl
	rule__SwitchStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); }
	(rule__SwitchStatement__CasesAssignment_5)*
	{ after(grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStatement__Group__6__Impl
	rule__SwitchStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatementAccess().getDefaultCaseAssignment_6()); }
	(rule__SwitchStatement__DefaultCaseAssignment_6)?
	{ after(grammarAccess.getSwitchStatementAccess().getDefaultCaseAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case__Group__0__Impl
	rule__Case__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAccess().getCaseKeyword_0()); }
	'case'
	{ after(grammarAccess.getCaseAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case__Group__1__Impl
	rule__Case__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAccess().getValueAssignment_1()); }
	(rule__Case__ValueAssignment_1)
	{ after(grammarAccess.getCaseAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case__Group__2__Impl
	rule__Case__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getCaseAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAccess().getStatementsAssignment_3()); }
	(rule__Case__StatementsAssignment_3)*
	{ after(grammarAccess.getCaseAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Default__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__0__Impl
	rule__Default__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getDefaultAction_0()); }
	()
	{ after(grammarAccess.getDefaultAccess().getDefaultAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__1__Impl
	rule__Default__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getDefaultKeyword_1()); }
	'default'
	{ after(grammarAccess.getDefaultAccess().getDefaultKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__2__Impl
	rule__Default__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getDefaultAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getStatementsAssignment_3()); }
	(rule__Default__StatementsAssignment_3)*
	{ after(grammarAccess.getDefaultAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringManipulationStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringManipulationStatement__Group__0__Impl
	rule__StringManipulationStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringManipulationStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringManipulationStatementAccess().getStringManipulationFunctionCallParserRuleCall_0()); }
	ruleStringManipulationFunctionCall
	{ after(grammarAccess.getStringManipulationStatementAccess().getStringManipulationFunctionCallParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringManipulationStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringManipulationStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringManipulationStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringManipulationStatementAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getStringManipulationStatementAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SplitFunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitFunctionCall__Group__0__Impl
	rule__SplitFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitFunctionCallAccess().getSplitKeyword_0()); }
	'split'
	{ after(grammarAccess.getSplitFunctionCallAccess().getSplitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitFunctionCall__Group__1__Impl
	rule__SplitFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSplitFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitFunctionCall__Group__2__Impl
	rule__SplitFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitFunctionCallAccess().getStrAssignment_2()); }
	(rule__SplitFunctionCall__StrAssignment_2)
	{ after(grammarAccess.getSplitFunctionCallAccess().getStrAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitFunctionCall__Group__3__Impl
	rule__SplitFunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitFunctionCallAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getSplitFunctionCallAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitFunctionCall__Group__4__Impl
	rule__SplitFunctionCall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitFunctionCallAccess().getDelimiterAssignment_4()); }
	(rule__SplitFunctionCall__DelimiterAssignment_4)
	{ after(grammarAccess.getSplitFunctionCallAccess().getDelimiterAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitFunctionCall__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitFunctionCallAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getSplitFunctionCallAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JoinFunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JoinFunctionCall__Group__0__Impl
	rule__JoinFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinFunctionCallAccess().getJoinKeyword_0()); }
	'join'
	{ after(grammarAccess.getJoinFunctionCallAccess().getJoinKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JoinFunctionCall__Group__1__Impl
	rule__JoinFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getJoinFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JoinFunctionCall__Group__2__Impl
	rule__JoinFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinFunctionCallAccess().getStrAssignment_2()); }
	(rule__JoinFunctionCall__StrAssignment_2)
	{ after(grammarAccess.getJoinFunctionCallAccess().getStrAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JoinFunctionCall__Group__3__Impl
	rule__JoinFunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinFunctionCallAccess().getGroup_3()); }
	(rule__JoinFunctionCall__Group_3__0)*
	{ after(grammarAccess.getJoinFunctionCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JoinFunctionCall__Group__4__Impl
	rule__JoinFunctionCall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinFunctionCallAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getJoinFunctionCallAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JoinFunctionCall__Group__5__Impl
	rule__JoinFunctionCall__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinFunctionCallAccess().getDelimiterAssignment_5()); }
	(rule__JoinFunctionCall__DelimiterAssignment_5)
	{ after(grammarAccess.getJoinFunctionCallAccess().getDelimiterAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JoinFunctionCall__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinFunctionCallAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getJoinFunctionCallAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JoinFunctionCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JoinFunctionCall__Group_3__0__Impl
	rule__JoinFunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinFunctionCallAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getJoinFunctionCallAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JoinFunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinFunctionCallAccess().getStrAssignment_3_1()); }
	(rule__JoinFunctionCall__StrAssignment_3_1)
	{ after(grammarAccess.getJoinFunctionCallAccess().getStrAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SliceFunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceFunctionCall__Group__0__Impl
	rule__SliceFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceFunctionCallAccess().getSliceKeyword_0()); }
	'slice'
	{ after(grammarAccess.getSliceFunctionCallAccess().getSliceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceFunctionCall__Group__1__Impl
	rule__SliceFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSliceFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceFunctionCall__Group__2__Impl
	rule__SliceFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceFunctionCallAccess().getStrAssignment_2()); }
	(rule__SliceFunctionCall__StrAssignment_2)
	{ after(grammarAccess.getSliceFunctionCallAccess().getStrAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceFunctionCall__Group__3__Impl
	rule__SliceFunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceFunctionCallAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getSliceFunctionCallAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceFunctionCall__Group__4__Impl
	rule__SliceFunctionCall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceFunctionCallAccess().getStartAssignment_4()); }
	(rule__SliceFunctionCall__StartAssignment_4)
	{ after(grammarAccess.getSliceFunctionCallAccess().getStartAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceFunctionCall__Group__5__Impl
	rule__SliceFunctionCall__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceFunctionCallAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getSliceFunctionCallAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceFunctionCall__Group__6__Impl
	rule__SliceFunctionCall__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceFunctionCallAccess().getEndAssignment_6()); }
	(rule__SliceFunctionCall__EndAssignment_6)
	{ after(grammarAccess.getSliceFunctionCallAccess().getEndAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceFunctionCall__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceFunctionCallAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getSliceFunctionCallAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ThrowStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ThrowStatement__Group__0__Impl
	rule__ThrowStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); }
	'throw'
	{ after(grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ThrowStatement__Group__1__Impl
	rule__ThrowStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThrowStatementAccess().getExprAssignment_1()); }
	(rule__ThrowStatement__ExprAssignment_1)
	{ after(grammarAccess.getThrowStatementAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ThrowStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThrowStatementAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getThrowStatementAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DomainModel__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainModelAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getDomainModelAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedElementAssignment_1_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedElementImportElementParserRuleCall_1_0_0_0_0()); }
		ruleImportElement
		{ after(grammarAccess.getImportAccess().getImportedElementImportElementParserRuleCall_1_0_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedElementsAssignment_1_0_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedElementsImportElementParserRuleCall_1_0_1_1_0_0()); }
		ruleImportElement
		{ after(grammarAccess.getImportAccess().getImportedElementsImportElementParserRuleCall_1_0_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedElementsAssignment_1_0_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedElementsImportElementParserRuleCall_1_0_1_1_1_1_0()); }
		ruleImportElement
		{ after(grammarAccess.getImportAccess().getImportedElementsImportElementParserRuleCall_1_0_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportElement__ElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportElementAccess().getElementAlternatives_0_0()); }
		(rule__ImportElement__ElementAlternatives_0_0)
		{ after(grammarAccess.getImportElementAccess().getElementAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportElement__AliasAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportElementAccess().getAliasIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getImportElementAccess().getAliasIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeEnumRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ExprAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getExprExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableDeclarationAccess().getExprExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__ExprAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AugmentedAssignment__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAugmentedAssignmentAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAugmentedAssignmentAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getRightComparisonExpressionParserRuleCall_1_1_0()); }
		ruleComparisonExpression
		{ after(grammarAccess.getLogicalExpressionAccess().getRightComparisonExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getRightArithmeticExpressionParserRuleCall_1_2_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getComparisonExpressionAccess().getRightArithmeticExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticExpressionAccess().getRightMultiplicationExpressionParserRuleCall_1_2_0()); }
		ruleMultiplicationExpression
		{ after(grammarAccess.getArithmeticExpressionAccess().getRightMultiplicationExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationExpressionAccess().getRightExponentiationExpressionParserRuleCall_1_2_0()); }
		ruleExponentiationExpression
		{ after(grammarAccess.getMultiplicationExpressionAccess().getRightExponentiationExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentiationExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentiationExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getExponentiationExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__ParametersAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnonymousFunctionAccess().getParametersIDTerminalRuleCall_2_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAnonymousFunctionAccess().getParametersIDTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__ParametersAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnonymousFunctionAccess().getParametersIDTerminalRuleCall_2_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAnonymousFunctionAccess().getParametersIDTerminalRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousFunction__BodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnonymousFunctionAccess().getBodyBlockParserRuleCall_4_0()); }
		ruleBlock
		{ after(grammarAccess.getAnonymousFunctionAccess().getBodyBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueNUMBERParserRuleCall_0()); }
		ruleNUMBER
		{ after(grammarAccess.getNumberLiteralAccess().getValueNUMBERParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getValueAlternatives_1_0()); }
		(rule__Boolean__ValueAlternatives_1_0)
		{ after(grammarAccess.getBooleanAccess().getValueAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotBoolean__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotBooleanAccess().getValueNOTTerminalRuleCall_1_0()); }
		RULE_NOT
		{ after(grammarAccess.getNotBooleanAccess().getValueNOTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharLiteralAccess().getValueCHARTerminalRuleCall_0()); }
		RULE_CHAR
		{ after(grammarAccess.getCharLiteralAccess().getValueCHARTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableReferenceAccess().getNameVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getVariableReferenceAccess().getNameVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableReferenceAccess().getNameVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getVariableReferenceAccess().getNameVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ThenBranchAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getThenBranchBlockParserRuleCall_4_0()); }
		ruleBlock
		{ after(grammarAccess.getIfStatementAccess().getThenBranchBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseBranchAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseBranchBlockParserRuleCall_5_1_0()); }
		ruleBlock
		{ after(grammarAccess.getIfStatementAccess().getElseBranchBlockParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__InitializationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getInitializationExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getForLoopAccess().getInitializationExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__ConditionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getConditionExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getForLoopAccess().getConditionExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__IncrementAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getIncrementExpressionParserRuleCall_6_0()); }
		ruleExpression
		{ after(grammarAccess.getForLoopAccess().getIncrementExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__BodyAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getBodyBlockParserRuleCall_8_0()); }
		ruleBlock
		{ after(grammarAccess.getForLoopAccess().getBodyBlockParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getConditionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileLoopAccess().getConditionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__BodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getBodyBlockParserRuleCall_4_0()); }
		ruleBlock
		{ after(grammarAccess.getWhileLoopAccess().getBodyBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__BodyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoWhileLoopAccess().getBodyBlockParserRuleCall_1_0()); }
		ruleBlock
		{ after(grammarAccess.getDoWhileLoopAccess().getBodyBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__ConditionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoWhileLoopAccess().getConditionExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getDoWhileLoopAccess().getConditionExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ReturnTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getReturnTypeTypeEnumRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getFunctionDeclarationAccess().getReturnTypeTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_4_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_4_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_6_0()); }
		ruleBlock
		{ after(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getNameFunctionDeclarationCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFunctionCallAccess().getNameFunctionDeclarationIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallAccess().getNameFunctionDeclarationIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallAccess().getNameFunctionDeclarationCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionReturn__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionReturnAccess().getExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionReturnAccess().getExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__ArgumentsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConsoleLogStatementAccess().getArgumentsExpressionParserRuleCall_3_0_0()); }
		ruleExpression
		{ after(grammarAccess.getConsoleLogStatementAccess().getArgumentsExpressionParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsoleLogStatement__ArgumentsAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConsoleLogStatementAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getConsoleLogStatementAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__TryBlockAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTryCatchStatementAccess().getTryBlockBlockParserRuleCall_1_0()); }
		ruleBlock
		{ after(grammarAccess.getTryCatchStatementAccess().getTryBlockBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__ExceptionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTryCatchStatementAccess().getExceptionIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getTryCatchStatementAccess().getExceptionIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TryCatchStatement__CatchBlockAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTryCatchStatementAccess().getCatchBlockBlockParserRuleCall_6_0()); }
		ruleBlock
		{ after(grammarAccess.getTryCatchStatementAccess().getCatchBlockBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__CasesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchStatementAccess().getCasesCaseParserRuleCall_5_0()); }
		ruleCase
		{ after(grammarAccess.getSwitchStatementAccess().getCasesCaseParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__DefaultCaseAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchStatementAccess().getDefaultCaseDefaultParserRuleCall_6_0()); }
		ruleDefault
		{ after(grammarAccess.getSwitchStatementAccess().getDefaultCaseDefaultParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getCaseAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getCaseAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefaultAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getDefaultAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__StrAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSplitFunctionCallAccess().getStrExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSplitFunctionCallAccess().getStrExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitFunctionCall__DelimiterAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSplitFunctionCallAccess().getDelimiterStringLiteralParserRuleCall_4_0()); }
		ruleStringLiteral
		{ after(grammarAccess.getSplitFunctionCallAccess().getDelimiterStringLiteralParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__StrAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJoinFunctionCallAccess().getStrExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getJoinFunctionCallAccess().getStrExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__StrAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJoinFunctionCallAccess().getStrExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getJoinFunctionCallAccess().getStrExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinFunctionCall__DelimiterAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJoinFunctionCallAccess().getDelimiterStringLiteralParserRuleCall_5_0()); }
		ruleStringLiteral
		{ after(grammarAccess.getJoinFunctionCallAccess().getDelimiterStringLiteralParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__StrAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSliceFunctionCallAccess().getStrExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSliceFunctionCallAccess().getStrExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__StartAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSliceFunctionCallAccess().getStartINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getSliceFunctionCallAccess().getStartINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceFunctionCall__EndAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSliceFunctionCallAccess().getEndINTTerminalRuleCall_6_0()); }
		RULE_INT
		{ after(grammarAccess.getSliceFunctionCallAccess().getEndINTTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowStatement__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThrowStatementAccess().getExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getThrowStatementAccess().getExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NOT : '!'? ('true'|'false');

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_CHAR : '\'' ('a'..'z'|'A'..'Z'|'0'..'9') '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
