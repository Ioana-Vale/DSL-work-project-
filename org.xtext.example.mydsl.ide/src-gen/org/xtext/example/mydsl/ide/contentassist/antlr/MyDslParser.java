/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getImportAccess().getAlternatives_1_0(), "rule__Import__Alternatives_1_0");
			builder.put(grammarAccess.getImportElementAccess().getElementAlternatives_0_0(), "rule__ImportElement__ElementAlternatives_0_0");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getPostfixOperatorAccess().getAlternatives_1(), "rule__PostfixOperator__Alternatives_1");
			builder.put(grammarAccess.getPrefixOperatorAccess().getAlternatives_0(), "rule__PrefixOperator__Alternatives_0");
			builder.put(grammarAccess.getBooleanAccess().getValueAlternatives_1_0(), "rule__Boolean__ValueAlternatives_1_0");
			builder.put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
			builder.put(grammarAccess.getLogicalOperatorAccess().getAlternatives(), "rule__LogicalOperator__Alternatives");
			builder.put(grammarAccess.getMultiplicationOperatorAccess().getAlternatives(), "rule__MultiplicationOperator__Alternatives");
			builder.put(grammarAccess.getArithmeticOperatorAccess().getAlternatives(), "rule__ArithmeticOperator__Alternatives");
			builder.put(grammarAccess.getAugmentedOperatorAccess().getAlternatives(), "rule__AugmentedOperator__Alternatives");
			builder.put(grammarAccess.getStringManipulationFunctionCallAccess().getAlternatives(), "rule__StringManipulationFunctionCall__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup_1(), "rule__Import__Group_1__0");
			builder.put(grammarAccess.getImportAccess().getGroup_1_0_0(), "rule__Import__Group_1_0_0__0");
			builder.put(grammarAccess.getImportAccess().getGroup_1_0_1(), "rule__Import__Group_1_0_1__0");
			builder.put(grammarAccess.getImportAccess().getGroup_1_0_1_1(), "rule__Import__Group_1_0_1_1__0");
			builder.put(grammarAccess.getImportAccess().getGroup_1_0_1_1_1(), "rule__Import__Group_1_0_1_1_1__0");
			builder.put(grammarAccess.getImportElementAccess().getGroup(), "rule__ImportElement__Group__0");
			builder.put(grammarAccess.getImportElementAccess().getGroup_1(), "rule__ImportElement__Group_1__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup_2(), "rule__VariableDeclaration__Group_2__0");
			builder.put(grammarAccess.getExpressionStatementAccess().getGroup(), "rule__ExpressionStatement__Group__0");
			builder.put(grammarAccess.getAugmentedAssignmentAccess().getGroup(), "rule__AugmentedAssignment__Group__0");
			builder.put(grammarAccess.getLogicalExpressionAccess().getGroup(), "rule__LogicalExpression__Group__0");
			builder.put(grammarAccess.getLogicalExpressionAccess().getGroup_1(), "rule__LogicalExpression__Group_1__0");
			builder.put(grammarAccess.getLogicalExpressionAccess().getGroup_1_0(), "rule__LogicalExpression__Group_1_0__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
			builder.put(grammarAccess.getArithmeticExpressionAccess().getGroup(), "rule__ArithmeticExpression__Group__0");
			builder.put(grammarAccess.getArithmeticExpressionAccess().getGroup_1(), "rule__ArithmeticExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplicationExpressionAccess().getGroup(), "rule__MultiplicationExpression__Group__0");
			builder.put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1(), "rule__MultiplicationExpression__Group_1__0");
			builder.put(grammarAccess.getExponentiationExpressionAccess().getGroup(), "rule__ExponentiationExpression__Group__0");
			builder.put(grammarAccess.getExponentiationExpressionAccess().getGroup_1(), "rule__ExponentiationExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getPostfixOperatorAccess().getGroup(), "rule__PostfixOperator__Group__0");
			builder.put(grammarAccess.getPrefixOperatorAccess().getGroup(), "rule__PrefixOperator__Group__0");
			builder.put(grammarAccess.getAnonymousFunctionAccess().getGroup(), "rule__AnonymousFunction__Group__0");
			builder.put(grammarAccess.getAnonymousFunctionAccess().getGroup_2(), "rule__AnonymousFunction__Group_2__0");
			builder.put(grammarAccess.getAnonymousFunctionAccess().getGroup_2_1(), "rule__AnonymousFunction__Group_2_1__0");
			builder.put(grammarAccess.getNUMBERAccess().getGroup(), "rule__NUMBER__Group__0");
			builder.put(grammarAccess.getNUMBERAccess().getGroup_1(), "rule__NUMBER__Group_1__0");
			builder.put(grammarAccess.getBooleanAccess().getGroup(), "rule__Boolean__Group__0");
			builder.put(grammarAccess.getNotBooleanAccess().getGroup(), "rule__NotBoolean__Group__0");
			builder.put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
			builder.put(grammarAccess.getIfStatementAccess().getGroup_5(), "rule__IfStatement__Group_5__0");
			builder.put(grammarAccess.getForLoopAccess().getGroup(), "rule__ForLoop__Group__0");
			builder.put(grammarAccess.getWhileLoopAccess().getGroup(), "rule__WhileLoop__Group__0");
			builder.put(grammarAccess.getDoWhileLoopAccess().getGroup(), "rule__DoWhileLoop__Group__0");
			builder.put(grammarAccess.getContinueStatementAccess().getGroup(), "rule__ContinueStatement__Group__0");
			builder.put(grammarAccess.getBreakStatementAccess().getGroup(), "rule__BreakStatement__Group__0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getGroup_4(), "rule__FunctionDeclaration__Group_4__0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1(), "rule__FunctionDeclaration__Group_4_1__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_2(), "rule__FunctionCall__Group_2__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_2_1(), "rule__FunctionCall__Group_2_1__0");
			builder.put(grammarAccess.getFunctionReturnAccess().getGroup(), "rule__FunctionReturn__Group__0");
			builder.put(grammarAccess.getConsoleLogStatementAccess().getGroup(), "rule__ConsoleLogStatement__Group__0");
			builder.put(grammarAccess.getConsoleLogStatementAccess().getGroup_3(), "rule__ConsoleLogStatement__Group_3__0");
			builder.put(grammarAccess.getConsoleLogStatementAccess().getGroup_3_1(), "rule__ConsoleLogStatement__Group_3_1__0");
			builder.put(grammarAccess.getTryCatchStatementAccess().getGroup(), "rule__TryCatchStatement__Group__0");
			builder.put(grammarAccess.getSwitchStatementAccess().getGroup(), "rule__SwitchStatement__Group__0");
			builder.put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
			builder.put(grammarAccess.getDefaultAccess().getGroup(), "rule__Default__Group__0");
			builder.put(grammarAccess.getStringManipulationStatementAccess().getGroup(), "rule__StringManipulationStatement__Group__0");
			builder.put(grammarAccess.getSplitFunctionCallAccess().getGroup(), "rule__SplitFunctionCall__Group__0");
			builder.put(grammarAccess.getJoinFunctionCallAccess().getGroup(), "rule__JoinFunctionCall__Group__0");
			builder.put(grammarAccess.getJoinFunctionCallAccess().getGroup_3(), "rule__JoinFunctionCall__Group_3__0");
			builder.put(grammarAccess.getSliceFunctionCallAccess().getGroup(), "rule__SliceFunctionCall__Group__0");
			builder.put(grammarAccess.getThrowStatementAccess().getGroup(), "rule__ThrowStatement__Group__0");
			builder.put(grammarAccess.getDomainModelAccess().getStatementsAssignment(), "rule__DomainModel__StatementsAssignment");
			builder.put(grammarAccess.getImportAccess().getImportedElementAssignment_1_0_0_0(), "rule__Import__ImportedElementAssignment_1_0_0_0");
			builder.put(grammarAccess.getImportAccess().getImportedElementsAssignment_1_0_1_1_0(), "rule__Import__ImportedElementsAssignment_1_0_1_1_0");
			builder.put(grammarAccess.getImportAccess().getImportedElementsAssignment_1_0_1_1_1_1(), "rule__Import__ImportedElementsAssignment_1_0_1_1_1_1");
			builder.put(grammarAccess.getImportAccess().getImportURIAssignment_2(), "rule__Import__ImportURIAssignment_2");
			builder.put(grammarAccess.getImportElementAccess().getElementAssignment_0(), "rule__ImportElement__ElementAssignment_0");
			builder.put(grammarAccess.getImportElementAccess().getAliasAssignment_1_1(), "rule__ImportElement__AliasAssignment_1_1");
			builder.put(grammarAccess.getBlockAccess().getStatementsAssignment_1(), "rule__Block__StatementsAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0(), "rule__VariableDeclaration__TypeAssignment_0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getExprAssignment_2_1(), "rule__VariableDeclaration__ExprAssignment_2_1");
			builder.put(grammarAccess.getExpressionStatementAccess().getExprAssignment_0(), "rule__ExpressionStatement__ExprAssignment_0");
			builder.put(grammarAccess.getAugmentedAssignmentAccess().getExprAssignment_2(), "rule__AugmentedAssignment__ExprAssignment_2");
			builder.put(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1_1(), "rule__LogicalExpression__RightAssignment_1_1");
			builder.put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2(), "rule__ComparisonExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getArithmeticExpressionAccess().getRightAssignment_1_2(), "rule__ArithmeticExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationExpressionAccess().getRightAssignment_1_2(), "rule__MultiplicationExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getExponentiationExpressionAccess().getRightAssignment_1_2(), "rule__ExponentiationExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAnonymousFunctionAccess().getParametersAssignment_2_0(), "rule__AnonymousFunction__ParametersAssignment_2_0");
			builder.put(grammarAccess.getAnonymousFunctionAccess().getParametersAssignment_2_1_1(), "rule__AnonymousFunction__ParametersAssignment_2_1_1");
			builder.put(grammarAccess.getAnonymousFunctionAccess().getBodyAssignment_4(), "rule__AnonymousFunction__BodyAssignment_4");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
			builder.put(grammarAccess.getBooleanAccess().getValueAssignment_1(), "rule__Boolean__ValueAssignment_1");
			builder.put(grammarAccess.getNotBooleanAccess().getValueAssignment_1(), "rule__NotBoolean__ValueAssignment_1");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getCharLiteralAccess().getValueAssignment(), "rule__CharLiteral__ValueAssignment");
			builder.put(grammarAccess.getVariableReferenceAccess().getNameAssignment(), "rule__VariableReference__NameAssignment");
			builder.put(grammarAccess.getIfStatementAccess().getConditionAssignment_2(), "rule__IfStatement__ConditionAssignment_2");
			builder.put(grammarAccess.getIfStatementAccess().getThenBranchAssignment_4(), "rule__IfStatement__ThenBranchAssignment_4");
			builder.put(grammarAccess.getIfStatementAccess().getElseBranchAssignment_5_1(), "rule__IfStatement__ElseBranchAssignment_5_1");
			builder.put(grammarAccess.getForLoopAccess().getInitializationAssignment_2(), "rule__ForLoop__InitializationAssignment_2");
			builder.put(grammarAccess.getForLoopAccess().getConditionAssignment_4(), "rule__ForLoop__ConditionAssignment_4");
			builder.put(grammarAccess.getForLoopAccess().getIncrementAssignment_6(), "rule__ForLoop__IncrementAssignment_6");
			builder.put(grammarAccess.getForLoopAccess().getBodyAssignment_8(), "rule__ForLoop__BodyAssignment_8");
			builder.put(grammarAccess.getWhileLoopAccess().getConditionAssignment_2(), "rule__WhileLoop__ConditionAssignment_2");
			builder.put(grammarAccess.getWhileLoopAccess().getBodyAssignment_4(), "rule__WhileLoop__BodyAssignment_4");
			builder.put(grammarAccess.getDoWhileLoopAccess().getBodyAssignment_1(), "rule__DoWhileLoop__BodyAssignment_1");
			builder.put(grammarAccess.getDoWhileLoopAccess().getConditionAssignment_4(), "rule__DoWhileLoop__ConditionAssignment_4");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getReturnTypeAssignment_0(), "rule__FunctionDeclaration__ReturnTypeAssignment_0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2(), "rule__FunctionDeclaration__NameAssignment_2");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_0(), "rule__FunctionDeclaration__ParametersAssignment_4_0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_1_1(), "rule__FunctionDeclaration__ParametersAssignment_4_1_1");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_6(), "rule__FunctionDeclaration__BodyAssignment_6");
			builder.put(grammarAccess.getFunctionCallAccess().getNameAssignment_0(), "rule__FunctionCall__NameAssignment_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_0(), "rule__FunctionCall__ArgumentsAssignment_2_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_1_1(), "rule__FunctionCall__ArgumentsAssignment_2_1_1");
			builder.put(grammarAccess.getFunctionReturnAccess().getExprAssignment_1(), "rule__FunctionReturn__ExprAssignment_1");
			builder.put(grammarAccess.getConsoleLogStatementAccess().getArgumentsAssignment_3_0(), "rule__ConsoleLogStatement__ArgumentsAssignment_3_0");
			builder.put(grammarAccess.getConsoleLogStatementAccess().getArgumentsAssignment_3_1_1(), "rule__ConsoleLogStatement__ArgumentsAssignment_3_1_1");
			builder.put(grammarAccess.getTryCatchStatementAccess().getTryBlockAssignment_1(), "rule__TryCatchStatement__TryBlockAssignment_1");
			builder.put(grammarAccess.getTryCatchStatementAccess().getExceptionAssignment_4(), "rule__TryCatchStatement__ExceptionAssignment_4");
			builder.put(grammarAccess.getTryCatchStatementAccess().getCatchBlockAssignment_6(), "rule__TryCatchStatement__CatchBlockAssignment_6");
			builder.put(grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2(), "rule__SwitchStatement__ExpressionAssignment_2");
			builder.put(grammarAccess.getSwitchStatementAccess().getCasesAssignment_5(), "rule__SwitchStatement__CasesAssignment_5");
			builder.put(grammarAccess.getSwitchStatementAccess().getDefaultCaseAssignment_6(), "rule__SwitchStatement__DefaultCaseAssignment_6");
			builder.put(grammarAccess.getCaseAccess().getValueAssignment_1(), "rule__Case__ValueAssignment_1");
			builder.put(grammarAccess.getCaseAccess().getStatementsAssignment_3(), "rule__Case__StatementsAssignment_3");
			builder.put(grammarAccess.getDefaultAccess().getStatementsAssignment_3(), "rule__Default__StatementsAssignment_3");
			builder.put(grammarAccess.getSplitFunctionCallAccess().getStrAssignment_2(), "rule__SplitFunctionCall__StrAssignment_2");
			builder.put(grammarAccess.getSplitFunctionCallAccess().getDelimiterAssignment_4(), "rule__SplitFunctionCall__DelimiterAssignment_4");
			builder.put(grammarAccess.getJoinFunctionCallAccess().getStrAssignment_2(), "rule__JoinFunctionCall__StrAssignment_2");
			builder.put(grammarAccess.getJoinFunctionCallAccess().getStrAssignment_3_1(), "rule__JoinFunctionCall__StrAssignment_3_1");
			builder.put(grammarAccess.getJoinFunctionCallAccess().getDelimiterAssignment_5(), "rule__JoinFunctionCall__DelimiterAssignment_5");
			builder.put(grammarAccess.getSliceFunctionCallAccess().getStrAssignment_2(), "rule__SliceFunctionCall__StrAssignment_2");
			builder.put(grammarAccess.getSliceFunctionCallAccess().getStartAssignment_4(), "rule__SliceFunctionCall__StartAssignment_4");
			builder.put(grammarAccess.getSliceFunctionCallAccess().getEndAssignment_6(), "rule__SliceFunctionCall__EndAssignment_6");
			builder.put(grammarAccess.getThrowStatementAccess().getExprAssignment_1(), "rule__ThrowStatement__ExprAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
