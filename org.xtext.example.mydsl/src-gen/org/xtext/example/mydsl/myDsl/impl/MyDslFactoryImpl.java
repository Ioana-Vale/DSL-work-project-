/**
 * generated by Xtext 2.35.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myDsl.AnonymousFunction;
import org.xtext.example.mydsl.myDsl.ArithmeticExpression;
import org.xtext.example.mydsl.myDsl.AugmentedAssignment;
import org.xtext.example.mydsl.myDsl.Block;
import org.xtext.example.mydsl.myDsl.Case;
import org.xtext.example.mydsl.myDsl.CharLiteral;
import org.xtext.example.mydsl.myDsl.ComparisonExpression;
import org.xtext.example.mydsl.myDsl.ConsoleLogStatement;
import org.xtext.example.mydsl.myDsl.Default;
import org.xtext.example.mydsl.myDsl.DoWhileLoop;
import org.xtext.example.mydsl.myDsl.DomainModel;
import org.xtext.example.mydsl.myDsl.ExponentiationExpression;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.ExpressionStatement;
import org.xtext.example.mydsl.myDsl.ForLoop;
import org.xtext.example.mydsl.myDsl.FunctionCall;
import org.xtext.example.mydsl.myDsl.FunctionDeclaration;
import org.xtext.example.mydsl.myDsl.FunctionReturn;
import org.xtext.example.mydsl.myDsl.IfStatement;
import org.xtext.example.mydsl.myDsl.Import;
import org.xtext.example.mydsl.myDsl.JoinFunctionCall;
import org.xtext.example.mydsl.myDsl.LogicalExpression;
import org.xtext.example.mydsl.myDsl.MultiplicationExpression;
import org.xtext.example.mydsl.myDsl.MyDslFactory;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NotBoolean;
import org.xtext.example.mydsl.myDsl.NumberLiteral;
import org.xtext.example.mydsl.myDsl.PostfixOperator;
import org.xtext.example.mydsl.myDsl.PrefixOperator;
import org.xtext.example.mydsl.myDsl.SliceFunctionCall;
import org.xtext.example.mydsl.myDsl.SplitFunctionCall;
import org.xtext.example.mydsl.myDsl.Statement;
import org.xtext.example.mydsl.myDsl.StringLiteral;
import org.xtext.example.mydsl.myDsl.StringManipulationFunctionCall;
import org.xtext.example.mydsl.myDsl.StringManipulationStatement;
import org.xtext.example.mydsl.myDsl.SwitchStatement;
import org.xtext.example.mydsl.myDsl.ThrowStatement;
import org.xtext.example.mydsl.myDsl.TryCatchStatement;
import org.xtext.example.mydsl.myDsl.Type;
import org.xtext.example.mydsl.myDsl.VariableDeclaration;
import org.xtext.example.mydsl.myDsl.VariableReference;
import org.xtext.example.mydsl.myDsl.WhileLoop;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static MyDslFactory init()
	{
		try
		{
			MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
			if (theMyDslFactory != null)
			{
				return theMyDslFactory;
			}
		}
		catch (Exception exception)
		{
			EcorePlugin.INSTANCE.log(exception);
		}
		return new MyDslFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MyDslFactoryImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass)
	{
		switch (eClass.getClassifierID())
		{
			case MyDslPackage.DOMAIN_MODEL: return createDomainModel();
			case MyDslPackage.IMPORT: return createImport();
			case MyDslPackage.STATEMENT: return createStatement();
			case MyDslPackage.BLOCK: return createBlock();
			case MyDslPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
			case MyDslPackage.EXPRESSION_STATEMENT: return createExpressionStatement();
			case MyDslPackage.EXPRESSION: return createExpression();
			case MyDslPackage.AUGMENTED_ASSIGNMENT: return createAugmentedAssignment();
			case MyDslPackage.POSTFIX_OPERATOR: return createPostfixOperator();
			case MyDslPackage.PREFIX_OPERATOR: return createPrefixOperator();
			case MyDslPackage.ANONYMOUS_FUNCTION: return createAnonymousFunction();
			case MyDslPackage.NUMBER_LITERAL: return createNumberLiteral();
			case MyDslPackage.STRING_LITERAL: return createStringLiteral();
			case MyDslPackage.CHAR_LITERAL: return createCharLiteral();
			case MyDslPackage.VARIABLE_REFERENCE: return createVariableReference();
			case MyDslPackage.IF_STATEMENT: return createIfStatement();
			case MyDslPackage.FOR_LOOP: return createForLoop();
			case MyDslPackage.WHILE_LOOP: return createWhileLoop();
			case MyDslPackage.DO_WHILE_LOOP: return createDoWhileLoop();
			case MyDslPackage.FUNCTION_DECLARATION: return createFunctionDeclaration();
			case MyDslPackage.FUNCTION_CALL: return createFunctionCall();
			case MyDslPackage.FUNCTION_RETURN: return createFunctionReturn();
			case MyDslPackage.CONSOLE_LOG_STATEMENT: return createConsoleLogStatement();
			case MyDslPackage.TRY_CATCH_STATEMENT: return createTryCatchStatement();
			case MyDslPackage.SWITCH_STATEMENT: return createSwitchStatement();
			case MyDslPackage.CASE: return createCase();
			case MyDslPackage.DEFAULT: return createDefault();
			case MyDslPackage.STRING_MANIPULATION_STATEMENT: return createStringManipulationStatement();
			case MyDslPackage.STRING_MANIPULATION_FUNCTION_CALL: return createStringManipulationFunctionCall();
			case MyDslPackage.SPLIT_FUNCTION_CALL: return createSplitFunctionCall();
			case MyDslPackage.JOIN_FUNCTION_CALL: return createJoinFunctionCall();
			case MyDslPackage.SLICE_FUNCTION_CALL: return createSliceFunctionCall();
			case MyDslPackage.THROW_STATEMENT: return createThrowStatement();
			case MyDslPackage.LOGICAL_EXPRESSION: return createLogicalExpression();
			case MyDslPackage.COMPARISON_EXPRESSION: return createComparisonExpression();
			case MyDslPackage.ARITHMETIC_EXPRESSION: return createArithmeticExpression();
			case MyDslPackage.MULTIPLICATION_EXPRESSION: return createMultiplicationExpression();
			case MyDslPackage.EXPONENTIATION_EXPRESSION: return createExponentiationExpression();
			case MyDslPackage.BOOLEAN: return createBoolean();
			case MyDslPackage.NOT_BOOLEAN: return createNotBoolean();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue)
	{
		switch (eDataType.getClassifierID())
		{
			case MyDslPackage.TYPE:
				return createTypeFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue)
	{
		switch (eDataType.getClassifierID())
		{
			case MyDslPackage.TYPE:
				return convertTypeToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public DomainModel createDomainModel()
	{
		DomainModelImpl domainModel = new DomainModelImpl();
		return domainModel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Import createImport()
	{
		ImportImpl import_ = new ImportImpl();
		return import_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Statement createStatement()
	{
		StatementImpl statement = new StatementImpl();
		return statement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Block createBlock()
	{
		BlockImpl block = new BlockImpl();
		return block;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public VariableDeclaration createVariableDeclaration()
	{
		VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
		return variableDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ExpressionStatement createExpressionStatement()
	{
		ExpressionStatementImpl expressionStatement = new ExpressionStatementImpl();
		return expressionStatement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Expression createExpression()
	{
		ExpressionImpl expression = new ExpressionImpl();
		return expression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public AugmentedAssignment createAugmentedAssignment()
	{
		AugmentedAssignmentImpl augmentedAssignment = new AugmentedAssignmentImpl();
		return augmentedAssignment;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public PostfixOperator createPostfixOperator()
	{
		PostfixOperatorImpl postfixOperator = new PostfixOperatorImpl();
		return postfixOperator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public PrefixOperator createPrefixOperator()
	{
		PrefixOperatorImpl prefixOperator = new PrefixOperatorImpl();
		return prefixOperator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public AnonymousFunction createAnonymousFunction()
	{
		AnonymousFunctionImpl anonymousFunction = new AnonymousFunctionImpl();
		return anonymousFunction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NumberLiteral createNumberLiteral()
	{
		NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
		return numberLiteral;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public StringLiteral createStringLiteral()
	{
		StringLiteralImpl stringLiteral = new StringLiteralImpl();
		return stringLiteral;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public CharLiteral createCharLiteral()
	{
		CharLiteralImpl charLiteral = new CharLiteralImpl();
		return charLiteral;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public VariableReference createVariableReference()
	{
		VariableReferenceImpl variableReference = new VariableReferenceImpl();
		return variableReference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public IfStatement createIfStatement()
	{
		IfStatementImpl ifStatement = new IfStatementImpl();
		return ifStatement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ForLoop createForLoop()
	{
		ForLoopImpl forLoop = new ForLoopImpl();
		return forLoop;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public WhileLoop createWhileLoop()
	{
		WhileLoopImpl whileLoop = new WhileLoopImpl();
		return whileLoop;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public DoWhileLoop createDoWhileLoop()
	{
		DoWhileLoopImpl doWhileLoop = new DoWhileLoopImpl();
		return doWhileLoop;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public FunctionDeclaration createFunctionDeclaration()
	{
		FunctionDeclarationImpl functionDeclaration = new FunctionDeclarationImpl();
		return functionDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public FunctionCall createFunctionCall()
	{
		FunctionCallImpl functionCall = new FunctionCallImpl();
		return functionCall;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public FunctionReturn createFunctionReturn()
	{
		FunctionReturnImpl functionReturn = new FunctionReturnImpl();
		return functionReturn;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ConsoleLogStatement createConsoleLogStatement()
	{
		ConsoleLogStatementImpl consoleLogStatement = new ConsoleLogStatementImpl();
		return consoleLogStatement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public TryCatchStatement createTryCatchStatement()
	{
		TryCatchStatementImpl tryCatchStatement = new TryCatchStatementImpl();
		return tryCatchStatement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SwitchStatement createSwitchStatement()
	{
		SwitchStatementImpl switchStatement = new SwitchStatementImpl();
		return switchStatement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Case createCase()
	{
		CaseImpl case_ = new CaseImpl();
		return case_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Default createDefault()
	{
		DefaultImpl default_ = new DefaultImpl();
		return default_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public StringManipulationStatement createStringManipulationStatement()
	{
		StringManipulationStatementImpl stringManipulationStatement = new StringManipulationStatementImpl();
		return stringManipulationStatement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public StringManipulationFunctionCall createStringManipulationFunctionCall()
	{
		StringManipulationFunctionCallImpl stringManipulationFunctionCall = new StringManipulationFunctionCallImpl();
		return stringManipulationFunctionCall;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SplitFunctionCall createSplitFunctionCall()
	{
		SplitFunctionCallImpl splitFunctionCall = new SplitFunctionCallImpl();
		return splitFunctionCall;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public JoinFunctionCall createJoinFunctionCall()
	{
		JoinFunctionCallImpl joinFunctionCall = new JoinFunctionCallImpl();
		return joinFunctionCall;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SliceFunctionCall createSliceFunctionCall()
	{
		SliceFunctionCallImpl sliceFunctionCall = new SliceFunctionCallImpl();
		return sliceFunctionCall;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ThrowStatement createThrowStatement()
	{
		ThrowStatementImpl throwStatement = new ThrowStatementImpl();
		return throwStatement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public LogicalExpression createLogicalExpression()
	{
		LogicalExpressionImpl logicalExpression = new LogicalExpressionImpl();
		return logicalExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComparisonExpression createComparisonExpression()
	{
		ComparisonExpressionImpl comparisonExpression = new ComparisonExpressionImpl();
		return comparisonExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ArithmeticExpression createArithmeticExpression()
	{
		ArithmeticExpressionImpl arithmeticExpression = new ArithmeticExpressionImpl();
		return arithmeticExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public MultiplicationExpression createMultiplicationExpression()
	{
		MultiplicationExpressionImpl multiplicationExpression = new MultiplicationExpressionImpl();
		return multiplicationExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ExponentiationExpression createExponentiationExpression()
	{
		ExponentiationExpressionImpl exponentiationExpression = new ExponentiationExpressionImpl();
		return exponentiationExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public org.xtext.example.mydsl.myDsl.Boolean createBoolean()
	{
		BooleanImpl boolean_ = new BooleanImpl();
		return boolean_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotBoolean createNotBoolean()
	{
		NotBooleanImpl notBoolean = new NotBooleanImpl();
		return notBoolean;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Type createTypeFromString(EDataType eDataType, String initialValue)
	{
		Type result = Type.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertTypeToString(EDataType eDataType, Object instanceValue)
	{
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public MyDslPackage getMyDslPackage()
	{
		return (MyDslPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static MyDslPackage getPackage()
	{
		return MyDslPackage.eINSTANCE;
	}

} //MyDslFactoryImpl
