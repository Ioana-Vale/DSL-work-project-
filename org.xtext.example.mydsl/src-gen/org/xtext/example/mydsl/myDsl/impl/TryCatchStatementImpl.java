/**
 * generated by Xtext 2.35.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.Block;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.TryCatchStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Try Catch Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TryCatchStatementImpl#getTryBlock <em>Try Block</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TryCatchStatementImpl#getException <em>Exception</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TryCatchStatementImpl#getCatchBlock <em>Catch Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TryCatchStatementImpl extends StatementImpl implements TryCatchStatement
{
	/**
	 * The cached value of the '{@link #getTryBlock() <em>Try Block</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTryBlock()
	 * @generated
	 * @ordered
	 */
	protected Block tryBlock;

	/**
	 * The default value of the '{@link #getException() <em>Exception</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getException()
	 * @generated
	 * @ordered
	 */
	protected static final String EXCEPTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getException() <em>Exception</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getException()
	 * @generated
	 * @ordered
	 */
	protected String exception = EXCEPTION_EDEFAULT;

	/**
	 * The cached value of the '{@link #getCatchBlock() <em>Catch Block</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCatchBlock()
	 * @generated
	 * @ordered
	 */
	protected Block catchBlock;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TryCatchStatementImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return MyDslPackage.Literals.TRY_CATCH_STATEMENT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Block getTryBlock()
	{
		return tryBlock;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetTryBlock(Block newTryBlock, NotificationChain msgs)
	{
		Block oldTryBlock = tryBlock;
		tryBlock = newTryBlock;
		if (eNotificationRequired())
		{
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.TRY_CATCH_STATEMENT__TRY_BLOCK, oldTryBlock, newTryBlock);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setTryBlock(Block newTryBlock)
	{
		if (newTryBlock != tryBlock)
		{
			NotificationChain msgs = null;
			if (tryBlock != null)
				msgs = ((InternalEObject)tryBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TRY_CATCH_STATEMENT__TRY_BLOCK, null, msgs);
			if (newTryBlock != null)
				msgs = ((InternalEObject)newTryBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TRY_CATCH_STATEMENT__TRY_BLOCK, null, msgs);
			msgs = basicSetTryBlock(newTryBlock, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TRY_CATCH_STATEMENT__TRY_BLOCK, newTryBlock, newTryBlock));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getException()
	{
		return exception;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setException(String newException)
	{
		String oldException = exception;
		exception = newException;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TRY_CATCH_STATEMENT__EXCEPTION, oldException, exception));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Block getCatchBlock()
	{
		return catchBlock;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetCatchBlock(Block newCatchBlock, NotificationChain msgs)
	{
		Block oldCatchBlock = catchBlock;
		catchBlock = newCatchBlock;
		if (eNotificationRequired())
		{
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.TRY_CATCH_STATEMENT__CATCH_BLOCK, oldCatchBlock, newCatchBlock);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setCatchBlock(Block newCatchBlock)
	{
		if (newCatchBlock != catchBlock)
		{
			NotificationChain msgs = null;
			if (catchBlock != null)
				msgs = ((InternalEObject)catchBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TRY_CATCH_STATEMENT__CATCH_BLOCK, null, msgs);
			if (newCatchBlock != null)
				msgs = ((InternalEObject)newCatchBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.TRY_CATCH_STATEMENT__CATCH_BLOCK, null, msgs);
			msgs = basicSetCatchBlock(newCatchBlock, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TRY_CATCH_STATEMENT__CATCH_BLOCK, newCatchBlock, newCatchBlock));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
	{
		switch (featureID)
		{
			case MyDslPackage.TRY_CATCH_STATEMENT__TRY_BLOCK:
				return basicSetTryBlock(null, msgs);
			case MyDslPackage.TRY_CATCH_STATEMENT__CATCH_BLOCK:
				return basicSetCatchBlock(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
			case MyDslPackage.TRY_CATCH_STATEMENT__TRY_BLOCK:
				return getTryBlock();
			case MyDslPackage.TRY_CATCH_STATEMENT__EXCEPTION:
				return getException();
			case MyDslPackage.TRY_CATCH_STATEMENT__CATCH_BLOCK:
				return getCatchBlock();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
			case MyDslPackage.TRY_CATCH_STATEMENT__TRY_BLOCK:
				setTryBlock((Block)newValue);
				return;
			case MyDslPackage.TRY_CATCH_STATEMENT__EXCEPTION:
				setException((String)newValue);
				return;
			case MyDslPackage.TRY_CATCH_STATEMENT__CATCH_BLOCK:
				setCatchBlock((Block)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
			case MyDslPackage.TRY_CATCH_STATEMENT__TRY_BLOCK:
				setTryBlock((Block)null);
				return;
			case MyDslPackage.TRY_CATCH_STATEMENT__EXCEPTION:
				setException(EXCEPTION_EDEFAULT);
				return;
			case MyDslPackage.TRY_CATCH_STATEMENT__CATCH_BLOCK:
				setCatchBlock((Block)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
			case MyDslPackage.TRY_CATCH_STATEMENT__TRY_BLOCK:
				return tryBlock != null;
			case MyDslPackage.TRY_CATCH_STATEMENT__EXCEPTION:
				return EXCEPTION_EDEFAULT == null ? exception != null : !EXCEPTION_EDEFAULT.equals(exception);
			case MyDslPackage.TRY_CATCH_STATEMENT__CATCH_BLOCK:
				return catchBlock != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString()
	{
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (exception: ");
		result.append(exception);
		result.append(')');
		return result.toString();
	}

} //TryCatchStatementImpl
