/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Import_CommaKeyword_1_0_0_1_q;
	protected AbstractElementAlias match_Import___LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__a;
	protected AbstractElementAlias match_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__a;
	protected AbstractElementAlias match_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__p;
	protected AbstractElementAlias match_Import_____LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__p_FromKeyword_1_1__q;
	protected AbstractElementAlias match_PostfixOperator_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0;
	protected AbstractElementAlias match_PrefixOperator_HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0;
	protected AbstractElementAlias match_PrefixOperator_Primary___LeftParenthesisKeyword_0_0_p___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q__q;
	protected AbstractElementAlias match_PrefixOperator___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_6;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Import_CommaKeyword_1_0_0_1_q = new TokenAlias(false, true, grammarAccess.getImportAccess().getCommaKeyword_1_0_0_1());
		match_Import___LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getImportAccess().getRightCurlyBracketKeyword_1_0_1_2()));
		match_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getImportAccess().getRightCurlyBracketKeyword_1_0_1_2()), new TokenAlias(false, false, grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1_0_1_0()));
		match_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getImportAccess().getRightCurlyBracketKeyword_1_0_1_2()), new TokenAlias(false, false, grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1_0_1_0()));
		match_Import_____LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__p_FromKeyword_1_1__q = new GroupAlias(false, true, new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getImportAccess().getRightCurlyBracketKeyword_1_0_1_2())), new TokenAlias(false, false, grammarAccess.getImportAccess().getFromKeyword_1_1()));
		match_PostfixOperator_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPostfixOperatorAccess().getHyphenMinusHyphenMinusKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getPostfixOperatorAccess().getPlusSignPlusSignKeyword_1_0()));
		match_PrefixOperator_HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrefixOperatorAccess().getHyphenMinusHyphenMinusKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getPrefixOperatorAccess().getPlusSignPlusSignKeyword_0_0()));
		match_PrefixOperator_Primary___LeftParenthesisKeyword_0_0_p___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q__q = new GroupAlias(false, true, new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()), new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getPrefixOperatorAccess().getHyphenMinusHyphenMinusKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getPrefixOperatorAccess().getPlusSignPlusSignKeyword_0_0())));
		match_PrefixOperator___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getPrefixOperatorAccess().getHyphenMinusHyphenMinusKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getPrefixOperatorAccess().getPlusSignPlusSignKeyword_0_0()));
		match_Primary_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Primary_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_6 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_7()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_6()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getArithmeticOperatorRule())
			return getArithmeticOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAugmentedOperatorRule())
			return getAugmentedOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBreakStatementRule())
			return getBreakStatementToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getComparisonOperatorRule())
			return getComparisonOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getContinueStatementRule())
			return getContinueStatementToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getExponentiationOperatorRule())
			return getExponentiationOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLogicalOperatorRule())
			return getLogicalOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMultiplicationOperatorRule())
			return getMultiplicationOperatorToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ArithmeticOperator:
	 *     '+' | '-';
	 */
	protected String getArithmeticOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * AugmentedOperator:
	 *     '+=' | '-=' | '*=' | '/=' | '%=' | '**=';
	 */
	protected String getAugmentedOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+=";
	}
	
	/**
	 * BreakStatement:
	 *     'break' ';';
	 */
	protected String getBreakStatementToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "break ;";
	}
	
	/**
	 * ComparisonOperator:
	 *     '<=' | '<' | '>=' | '>' | '!=' | '==' | '=';
	 */
	protected String getComparisonOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<=";
	}
	
	/**
	 * ContinueStatement:
	 *     'continue' ';';
	 */
	protected String getContinueStatementToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "continue ;";
	}
	
	/**
	 * ExponentiationOperator:
	 *     '**';
	 */
	protected String getExponentiationOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "**";
	}
	
	/**
	 * LogicalOperator:
	 *     '&&'|'||';
	 */
	protected String getLogicalOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&&";
	}
	
	/**
	 * MultiplicationOperator:
	 *     '*' | '/' | '%';
	 */
	protected String getMultiplicationOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "*";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Import_CommaKeyword_1_0_0_1_q.equals(syntax))
				emit_Import_CommaKeyword_1_0_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Import___LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__a.equals(syntax))
				emit_Import___LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__a.equals(syntax))
				emit_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__p.equals(syntax))
				emit_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Import_____LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__p_FromKeyword_1_1__q.equals(syntax))
				emit_Import_____LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__p_FromKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PostfixOperator_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0.equals(syntax))
				emit_PostfixOperator_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrefixOperator_HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0.equals(syntax))
				emit_PrefixOperator_HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrefixOperator_Primary___LeftParenthesisKeyword_0_0_p___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q__q.equals(syntax))
				emit_PrefixOperator_Primary___LeftParenthesisKeyword_0_0_p___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrefixOperator___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q.equals(syntax))
				emit_PrefixOperator___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_6.equals(syntax))
				emit_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_6(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     importedElement+=ImportElement (ambiguity) '{' ('}' '{')* importedElements+=ImportElement
	 *     importedElement+=ImportElement (ambiguity) ('{' '}')* 'from' importURI=STRING
	 *     importedElement+=ImportElement (ambiguity) ('{' '}')* importedElement+=ImportElement
	 
	 * </pre>
	 */
	protected void emit_Import_CommaKeyword_1_0_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'import' (ambiguity) importedElement+=ImportElement
	 *     importedElement+=ImportElement ','? (ambiguity) 'from' importURI=STRING
	 *     importedElement+=ImportElement ','? (ambiguity) importedElement+=ImportElement
	 *     importedElements+=ImportElement '}' (ambiguity) 'from' importURI=STRING
	 *     importedElements+=ImportElement '}' (ambiguity) importedElement+=ImportElement
	 
	 * </pre>
	 */
	protected void emit_Import___LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('}' '{')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'import' '{' (ambiguity) importedElements+=ImportElement
	 *     importedElement+=ImportElement ','? '{' (ambiguity) importedElements+=ImportElement
	 
	 * </pre>
	 */
	protected void emit_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('}' '{')+
	 *
	 * This ambiguous syntax occurs at:
	 *     importedElements+=ImportElement (ambiguity) importedElements+=ImportElement
	 
	 * </pre>
	 */
	protected void emit_Import___RightCurlyBracketKeyword_1_0_1_2_LeftCurlyBracketKeyword_1_0_1_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('{' '}')+ 'from')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'import' (ambiguity) importURI=STRING
	 
	 * </pre>
	 */
	protected void emit_Import_____LeftCurlyBracketKeyword_1_0_1_0_RightCurlyBracketKeyword_1_0_1_2__p_FromKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '++' | '--'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=[VariableDeclaration|ID] (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_PostfixOperator_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '++' | '--'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=[VariableDeclaration|ID]
	 
	 * </pre>
	 */
	protected void emit_PrefixOperator_HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('('+ ('++' | '--')?)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=[VariableDeclaration|ID]
	 
	 * </pre>
	 */
	protected void emit_PrefixOperator_Primary___LeftParenthesisKeyword_0_0_p___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('++' | '--')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) name=[VariableDeclaration|ID]
	 
	 * </pre>
	 */
	protected void emit_PrefixOperator___HyphenMinusHyphenMinusKeyword_0_1_or_PlusSignPlusSignKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'function' '(' ')' body=Block
	 *     (rule start) (ambiguity) 'function' '(' parameters+=ID
	 *     (rule start) (ambiguity) ('++' | '--')? name=[VariableDeclaration|ID]
	 *     (rule start) (ambiguity) value='false'
	 *     (rule start) (ambiguity) value='null'
	 *     (rule start) (ambiguity) value='true'
	 *     (rule start) (ambiguity) value=CHAR
	 *     (rule start) (ambiguity) value=NOT
	 *     (rule start) (ambiguity) value=NUMBER
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {ArithmeticExpression.left=}
	 *     (rule start) (ambiguity) {ComparisonExpression.left=}
	 *     (rule start) (ambiguity) {ExponentiationExpression.left=}
	 *     (rule start) (ambiguity) {LogicalExpression.left=}
	 *     (rule start) (ambiguity) {MultiplicationExpression.left=}
	 
	 * </pre>
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {ArithmeticExpression.left=}
	 *     (rule start) (ambiguity) {ComparisonExpression.left=}
	 *     (rule start) (ambiguity) {ExponentiationExpression.left=}
	 *     (rule start) (ambiguity) {LogicalExpression.left=}
	 *     (rule start) (ambiguity) {MultiplicationExpression.left=}
	 
	 * </pre>
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ContinueStatement | BreakStatement
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Statement_BreakStatementParserRuleCall_7_or_ContinueStatementParserRuleCall_6(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
