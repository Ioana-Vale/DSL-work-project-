/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DomainModel");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//DomainModel:
		//        (statements+=Statement)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(statements+=Statement)*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Assignment cImportedElementAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cImportedElementImportElementParserRuleCall_1_0_0_0_0 = (RuleCall)cImportedElementAssignment_1_0_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Assignment cImportedElementsAssignment_1_0_1_1_0 = (Assignment)cGroup_1_0_1_1.eContents().get(0);
		private final RuleCall cImportedElementsImportElementParserRuleCall_1_0_1_1_0_0 = (RuleCall)cImportedElementsAssignment_1_0_1_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1_1 = (Group)cGroup_1_0_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_1_0 = (Keyword)cGroup_1_0_1_1_1.eContents().get(0);
		private final Assignment cImportedElementsAssignment_1_0_1_1_1_1 = (Assignment)cGroup_1_0_1_1_1.eContents().get(1);
		private final RuleCall cImportedElementsImportElementParserRuleCall_1_0_1_1_1_1_0 = (RuleCall)cImportedElementsAssignment_1_0_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Keyword cFromKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		
		//Import:
		//    "import" ((importedElement+=ImportElement ","? |"{"(importedElements+=ImportElement  (',' importedElements+=ImportElement)*)?"}" )+ "from")? importURI=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"import" ((importedElement+=ImportElement ","? |"{"(importedElements+=ImportElement  (',' importedElements+=ImportElement)*)?"}" )+ "from")? importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//((importedElement+=ImportElement ","? |"{"(importedElements+=ImportElement  (',' importedElements+=ImportElement)*)?"}" )+ "from")?
		public Group getGroup_1() { return cGroup_1; }
		
		//(importedElement+=ImportElement ","? |"{"(importedElements+=ImportElement  (',' importedElements+=ImportElement)*)?"}" )+
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//importedElement+=ImportElement ","?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//importedElement+=ImportElement
		public Assignment getImportedElementAssignment_1_0_0_0() { return cImportedElementAssignment_1_0_0_0; }
		
		//ImportElement
		public RuleCall getImportedElementImportElementParserRuleCall_1_0_0_0_0() { return cImportedElementImportElementParserRuleCall_1_0_0_0_0; }
		
		//","?
		public Keyword getCommaKeyword_1_0_0_1() { return cCommaKeyword_1_0_0_1; }
		
		//"{"(importedElements+=ImportElement  (',' importedElements+=ImportElement)*)?"}"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_1_0() { return cLeftCurlyBracketKeyword_1_0_1_0; }
		
		//(importedElements+=ImportElement  (',' importedElements+=ImportElement)*)?
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//importedElements+=ImportElement
		public Assignment getImportedElementsAssignment_1_0_1_1_0() { return cImportedElementsAssignment_1_0_1_1_0; }
		
		//ImportElement
		public RuleCall getImportedElementsImportElementParserRuleCall_1_0_1_1_0_0() { return cImportedElementsImportElementParserRuleCall_1_0_1_1_0_0; }
		
		//(',' importedElements+=ImportElement)*
		public Group getGroup_1_0_1_1_1() { return cGroup_1_0_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_1_1_0() { return cCommaKeyword_1_0_1_1_1_0; }
		
		//importedElements+=ImportElement
		public Assignment getImportedElementsAssignment_1_0_1_1_1_1() { return cImportedElementsAssignment_1_0_1_1_1_1; }
		
		//ImportElement
		public RuleCall getImportedElementsImportElementParserRuleCall_1_0_1_1_1_1_0() { return cImportedElementsImportElementParserRuleCall_1_0_1_1_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_1_2() { return cRightCurlyBracketKeyword_1_0_1_2; }
		
		//"from"
		public Keyword getFromKeyword_1_1() { return cFromKeyword_1_1; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }
	}
	public class ImportElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ImportElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cElementAlternatives_0_0 = (Alternatives)cElementAssignment_0.eContents().get(0);
		private final RuleCall cElementIDTerminalRuleCall_0_0_0 = (RuleCall)cElementAlternatives_0_0.eContents().get(0);
		private final Keyword cElementAsteriskKeyword_0_0_1 = (Keyword)cElementAlternatives_0_0.eContents().get(1);
		private final RuleCall cElementSTRINGTerminalRuleCall_0_0_2 = (RuleCall)cElementAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//ImportElement returns Import:
		//    element=(ID|"*"|STRING) ("as" alias=ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//element=(ID|"*"|STRING) ("as" alias=ID)?
		public Group getGroup() { return cGroup; }
		
		//element=(ID|"*"|STRING)
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//(ID|"*"|STRING)
		public Alternatives getElementAlternatives_0_0() { return cElementAlternatives_0_0; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_0_0_0() { return cElementIDTerminalRuleCall_0_0_0; }
		
		//"*"
		public Keyword getElementAsteriskKeyword_0_0_1() { return cElementAsteriskKeyword_0_0_1; }
		
		//STRING
		public RuleCall getElementSTRINGTerminalRuleCall_0_0_2() { return cElementSTRINGTerminalRuleCall_0_0_2; }
		
		//("as" alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForLoopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileLoopParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDoWhileLoopParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cContinueStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBreakStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFunctionDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFunctionCallParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFunctionReturnParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cConsoleLogStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cTryCatchStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSwitchStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cStringManipulationStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cThrowStatementParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cImportParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//Statement:
		//    VariableDeclaration | ExpressionStatement | IfStatement | ForLoop |
		//    WhileLoop | DoWhileLoop | ContinueStatement | BreakStatement | FunctionDeclaration |
		//    FunctionCall | FunctionReturn | ConsoleLogStatement | TryCatchStatement | SwitchStatement |
		//    StringManipulationStatement | ThrowStatement|Import;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclaration | ExpressionStatement | IfStatement | ForLoop |
		//WhileLoop | DoWhileLoop | ContinueStatement | BreakStatement | FunctionDeclaration |
		//FunctionCall | FunctionReturn | ConsoleLogStatement | TryCatchStatement | SwitchStatement |
		//StringManipulationStatement | ThrowStatement|Import
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_1() { return cExpressionStatementParserRuleCall_1; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_2() { return cIfStatementParserRuleCall_2; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_3() { return cForLoopParserRuleCall_3; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_4() { return cWhileLoopParserRuleCall_4; }
		
		//DoWhileLoop
		public RuleCall getDoWhileLoopParserRuleCall_5() { return cDoWhileLoopParserRuleCall_5; }
		
		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_6() { return cContinueStatementParserRuleCall_6; }
		
		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_7() { return cBreakStatementParserRuleCall_7; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_8() { return cFunctionDeclarationParserRuleCall_8; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_9() { return cFunctionCallParserRuleCall_9; }
		
		//FunctionReturn
		public RuleCall getFunctionReturnParserRuleCall_10() { return cFunctionReturnParserRuleCall_10; }
		
		//ConsoleLogStatement
		public RuleCall getConsoleLogStatementParserRuleCall_11() { return cConsoleLogStatementParserRuleCall_11; }
		
		//TryCatchStatement
		public RuleCall getTryCatchStatementParserRuleCall_12() { return cTryCatchStatementParserRuleCall_12; }
		
		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_13() { return cSwitchStatementParserRuleCall_13; }
		
		//StringManipulationStatement
		public RuleCall getStringManipulationStatementParserRuleCall_14() { return cStringManipulationStatementParserRuleCall_14; }
		
		//ThrowStatement
		public RuleCall getThrowStatementParserRuleCall_15() { return cThrowStatementParserRuleCall_15; }
		
		//Import
		public RuleCall getImportParserRuleCall_16() { return cImportParserRuleCall_16; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//    '{' statements+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableDeclaration:
		//    type=Type name=ID ('=' expr=Expression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID ('=' expr=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_0_0() { return cTypeTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('=' expr=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_1_0() { return cExprExpressionParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExpressionStatement:
		//    expr=Expression';';
		@Override public ParserRule getRule() { return rule; }
		
		//expr=Expression';'
		public Group getGroup() { return cGroup; }
		
		//expr=Expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostfixOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrefixOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAugmentedAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//  LogicalExpression| PostfixOperator | PrefixOperator | AugmentedAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalExpression| PostfixOperator | PrefixOperator | AugmentedAssignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalExpression
		public RuleCall getLogicalExpressionParserRuleCall_0() { return cLogicalExpressionParserRuleCall_0; }
		
		//PostfixOperator
		public RuleCall getPostfixOperatorParserRuleCall_1() { return cPostfixOperatorParserRuleCall_1; }
		
		//PrefixOperator
		public RuleCall getPrefixOperatorParserRuleCall_2() { return cPrefixOperatorParserRuleCall_2; }
		
		//AugmentedAssignment
		public RuleCall getAugmentedAssignmentParserRuleCall_3() { return cAugmentedAssignmentParserRuleCall_3; }
	}
	public class AugmentedAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AugmentedAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAugmentedOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AugmentedAssignment:
		//    VariableReference AugmentedOperator expr=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableReference AugmentedOperator expr=Expression
		public Group getGroup() { return cGroup; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0() { return cVariableReferenceParserRuleCall_0; }
		
		//AugmentedOperator
		public RuleCall getAugmentedOperatorParserRuleCall_1() { return cAugmentedOperatorParserRuleCall_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}
	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cLogicalExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final RuleCall cLogicalOperatorParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//LogicalExpression returns Expression:
		//    ComparisonExpression (({LogicalExpression.left=current} LogicalOperator) right=ComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression (({LogicalExpression.left=current} LogicalOperator) right=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//(({LogicalExpression.left=current} LogicalOperator) right=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({LogicalExpression.left=current} LogicalOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LogicalExpression.left=current}
		public Action getLogicalExpressionLeftAction_1_0_0() { return cLogicalExpressionLeftAction_1_0_0; }
		
		//LogicalOperator
		public RuleCall getLogicalOperatorParserRuleCall_1_0_1() { return cLogicalOperatorParserRuleCall_1_0_1; }
		
		//right=ComparisonExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_1_0() { return cRightComparisonExpressionParserRuleCall_1_1_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cComparisonOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArithmeticExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//   // ('?' trueExpr=Expression ':' falseExpr=Expression)?;
		//ComparisonExpression returns Expression:
		//    ArithmeticExpression ({ComparisonExpression.left=current} ComparisonOperator right=ArithmeticExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmeticExpression ({ComparisonExpression.left=current} ComparisonOperator right=ArithmeticExpression)*
		public Group getGroup() { return cGroup; }
		
		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_0() { return cArithmeticExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} ComparisonOperator right=ArithmeticExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//ComparisonOperator
		public RuleCall getComparisonOperatorParserRuleCall_1_1() { return cComparisonOperatorParserRuleCall_1_1; }
		
		//right=ArithmeticExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ArithmeticExpression
		public RuleCall getRightArithmeticExpressionParserRuleCall_1_2_0() { return cRightArithmeticExpressionParserRuleCall_1_2_0; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArithmeticExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cArithmeticOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ArithmeticExpression returns Expression:
		//    MultiplicationExpression ({ArithmeticExpression.left=current} ArithmeticOperator right=MultiplicationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationExpression ({ArithmeticExpression.left=current} ArithmeticOperator right=MultiplicationExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationExpression
		public RuleCall getMultiplicationExpressionParserRuleCall_0() { return cMultiplicationExpressionParserRuleCall_0; }
		
		//({ArithmeticExpression.left=current} ArithmeticOperator right=MultiplicationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.left=current}
		public Action getArithmeticExpressionLeftAction_1_0() { return cArithmeticExpressionLeftAction_1_0; }
		
		//ArithmeticOperator
		public RuleCall getArithmeticOperatorParserRuleCall_1_1() { return cArithmeticOperatorParserRuleCall_1_1; }
		
		//right=MultiplicationExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplicationExpression
		public RuleCall getRightMultiplicationExpressionParserRuleCall_1_2_0() { return cRightMultiplicationExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentiationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cMultiplicationOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExponentiationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicationExpression returns Expression:
		//    ExponentiationExpression ({MultiplicationExpression.left=current} MultiplicationOperator right=ExponentiationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExponentiationExpression ({MultiplicationExpression.left=current} MultiplicationOperator right=ExponentiationExpression)*
		public Group getGroup() { return cGroup; }
		
		//ExponentiationExpression
		public RuleCall getExponentiationExpressionParserRuleCall_0() { return cExponentiationExpressionParserRuleCall_0; }
		
		//({MultiplicationExpression.left=current} MultiplicationOperator right=ExponentiationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicationExpression.left=current}
		public Action getMultiplicationExpressionLeftAction_1_0() { return cMultiplicationExpressionLeftAction_1_0; }
		
		//MultiplicationOperator
		public RuleCall getMultiplicationOperatorParserRuleCall_1_1() { return cMultiplicationOperatorParserRuleCall_1_1; }
		
		//right=ExponentiationExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExponentiationExpression
		public RuleCall getRightExponentiationExpressionParserRuleCall_1_2_0() { return cRightExponentiationExpressionParserRuleCall_1_2_0; }
	}
	public class ExponentiationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExponentiationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExponentiationExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cExponentiationOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExponentiationExpression returns Expression:
		//    Primary ({ExponentiationExpression.left=current} ExponentiationOperator right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({ExponentiationExpression.left=current} ExponentiationOperator right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({ExponentiationExpression.left=current} ExponentiationOperator right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExponentiationExpression.left=current}
		public Action getExponentiationExpressionLeftAction_1_0() { return cExponentiationExpressionLeftAction_1_0; }
		
		//ExponentiationOperator
		public RuleCall getExponentiationOperatorParserRuleCall_1_1() { return cExponentiationOperatorParserRuleCall_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCharLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableReferenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAnonymousFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBooleanParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNotBooleanParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Primary returns Expression:
		//    '(' Expression ')' | NumberLiteral | StringLiteral | CharLiteral | VariableReference |
		//    AnonymousFunction | Boolean| NotBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | NumberLiteral | StringLiteral | CharLiteral | VariableReference |
		//AnonymousFunction | Boolean| NotBoolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1() { return cNumberLiteralParserRuleCall_1; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }
		
		//CharLiteral
		public RuleCall getCharLiteralParserRuleCall_3() { return cCharLiteralParserRuleCall_3; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_4() { return cVariableReferenceParserRuleCall_4; }
		
		//AnonymousFunction
		public RuleCall getAnonymousFunctionParserRuleCall_5() { return cAnonymousFunctionParserRuleCall_5; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_6() { return cBooleanParserRuleCall_6; }
		
		//NotBoolean
		public RuleCall getNotBooleanParserRuleCall_7() { return cNotBooleanParserRuleCall_7; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UnaryExpression");
		private final RuleCall cPrimaryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnaryExpression returns Expression:
		//    Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall() { return cPrimaryParserRuleCall; }
	}
	public class PostfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PostfixOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//PostfixOperator:
		//    VariableReference ( '++' | '--') ;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableReference ( '++' | '--')
		public Group getGroup() { return cGroup; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0() { return cVariableReferenceParserRuleCall_0; }
		
		//( '++' | '--')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
	}
	public class PrefixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrefixOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PrefixOperator:
		//    ('++' | '--') VariableReference;
		@Override public ParserRule getRule() { return rule; }
		
		//('++' | '--') VariableReference
		public Group getGroup() { return cGroup; }
		
		//('++' | '--')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_0_0() { return cPlusSignPlusSignKeyword_0_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_0_1() { return cHyphenMinusHyphenMinusKeyword_0_1; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }
	}
	public class AnonymousFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AnonymousFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersIDTerminalRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//AnonymousFunction:
		//    'function' '(' (parameters+=ID (',' parameters+=ID)*)? ')' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' '(' (parameters+=ID (',' parameters+=ID)*)? ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=ID (',' parameters+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_2_0_0() { return cParametersIDTerminalRuleCall_2_0_0; }
		
		//(',' parameters+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_2_1_1_0() { return cParametersIDTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Block
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_4_0() { return cBodyBlockParserRuleCall_4_0; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//    value=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NUMBER
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0() { return cValueNUMBERParserRuleCall_0; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NUMBER returns ecore::EBigDecimal:
		//    INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		private final Keyword cValueNullKeyword_1_0_2 = (Keyword)cValueAlternatives_1_0.eContents().get(2);
		
		//Boolean returns Expression:
		//    {Boolean} value=("true" | "false" | "null");
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean} value=("true" | "false" | "null")
		public Group getGroup() { return cGroup; }
		
		//{Boolean}
		public Action getBooleanAction_0() { return cBooleanAction_0; }
		
		//value=("true" | "false" | "null")
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//("true" | "false" | "null")
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//"true"
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//"false"
		public Keyword getValueFalseKeyword_1_0_1() { return cValueFalseKeyword_1_0_1; }
		
		//"null"
		public Keyword getValueNullKeyword_1_0_2() { return cValueNullKeyword_1_0_2; }
	}
	public class NotBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NotBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNOTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NotBoolean returns Expression:
		//    {NotBoolean} value=NOT;
		@Override public ParserRule getRule() { return rule; }
		
		//{NotBoolean} value=NOT
		public Group getGroup() { return cGroup; }
		
		//{NotBoolean}
		public Action getNotBooleanAction_0() { return cNotBooleanAction_0; }
		
		//value=NOT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//NOT
		public RuleCall getValueNOTTerminalRuleCall_1_0() { return cValueNOTTerminalRuleCall_1_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		// value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class CharLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CharLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCHARTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CharLiteral:
		//    value=CHAR;
		@Override public ParserRule getRule() { return rule; }
		
		//value=CHAR
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//CHAR
		public RuleCall getValueCHARTerminalRuleCall_0() { return cValueCHARTerminalRuleCall_0; }
	}
	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableReference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameVariableDeclarationCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cNameVariableDeclarationCrossReference_0.eContents().get(1);
		
		//VariableReference:
		//    name=[VariableDeclaration|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[VariableDeclaration|ID]
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//[VariableDeclaration|ID]
		public CrossReference getNameVariableDeclarationCrossReference_0() { return cNameVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getNameVariableDeclarationIDTerminalRuleCall_0_1() { return cNameVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExclamationMarkEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//ComparisonOperator:
		//    '<=' | '<' | '>=' | '>' | '!=' | '==' | '=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<=' | '<' | '>=' | '>' | '!=' | '==' | '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_4() { return cExclamationMarkEqualsSignKeyword_4; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_5() { return cEqualsSignEqualsSignKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
	}
	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LogicalOperator:
		//    '&&'|'||';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&'|'||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
	}
	public class MultiplicationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MultiplicationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MultiplicationOperator:
		//    '*' | '/' | '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class ArithmeticOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArithmeticOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ArithmeticOperator:
		//    '+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class ExponentiationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExponentiationOperator");
		private final Keyword cAsteriskAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//ExponentiationOperator:
		//    '**';
		@Override public ParserRule getRule() { return rule; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword() { return cAsteriskAsteriskKeyword; }
	}
	public class AugmentedOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AugmentedOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAsteriskAsteriskEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//AugmentedOperator:
		//    '+=' | '-=' | '*=' | '/=' | '%=' | '**=';
		@Override public ParserRule getRule() { return rule; }
		
		//'+=' | '-=' | '*=' | '/=' | '%=' | '**='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_0() { return cPlusSignEqualsSignKeyword_0; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }
		
		//'*='
		public Keyword getAsteriskEqualsSignKeyword_2() { return cAsteriskEqualsSignKeyword_2; }
		
		//'/='
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }
		
		//'%='
		public Keyword getPercentSignEqualsSignKeyword_4() { return cPercentSignEqualsSignKeyword_4; }
		
		//'**='
		public Keyword getAsteriskAsteriskEqualsSignKeyword_5() { return cAsteriskAsteriskEqualsSignKeyword_5; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBranchAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBranchBlockParserRuleCall_4_0 = (RuleCall)cThenBranchAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBranchAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBranchBlockParserRuleCall_5_1_0 = (RuleCall)cElseBranchAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//    'if' '(' condition=Expression ')' thenBranch=Block ('else' elseBranch=Block)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=Expression ')' thenBranch=Block ('else' elseBranch=Block)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBranch=Block
		public Assignment getThenBranchAssignment_4() { return cThenBranchAssignment_4; }
		
		//Block
		public RuleCall getThenBranchBlockParserRuleCall_4_0() { return cThenBranchBlockParserRuleCall_4_0; }
		
		//('else' elseBranch=Block)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBranch=Block
		public Assignment getElseBranchAssignment_5_1() { return cElseBranchAssignment_5_1; }
		
		//Block
		public RuleCall getElseBranchBlockParserRuleCall_5_1_0() { return cElseBranchBlockParserRuleCall_5_1_0; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitializationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitializationExpressionParserRuleCall_2_0 = (RuleCall)cInitializationAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIncrementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIncrementExpressionParserRuleCall_6_0 = (RuleCall)cIncrementAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyBlockParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//ForLoop:
		//    'for' '(' initialization=Expression ';' condition=Expression ';' increment=Expression ')' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' initialization=Expression ';' condition=Expression ';' increment=Expression ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//initialization=Expression
		public Assignment getInitializationAssignment_2() { return cInitializationAssignment_2; }
		
		//Expression
		public RuleCall getInitializationExpressionParserRuleCall_2_0() { return cInitializationExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//increment=Expression
		public Assignment getIncrementAssignment_6() { return cIncrementAssignment_6; }
		
		//Expression
		public RuleCall getIncrementExpressionParserRuleCall_6_0() { return cIncrementExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//body=Block
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_8_0() { return cBodyBlockParserRuleCall_8_0; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//WhileLoop:
		//    'while' '(' condition=Expression ')' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' condition=Expression ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Block
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_4_0() { return cBodyBlockParserRuleCall_4_0; }
	}
	public class DoWhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DoWhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DoWhileLoop:
		//    'do' body=Block 'while' '(' condition=Expression ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'do' body=Block 'while' '(' condition=Expression ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//body=Block
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_1_0() { return cBodyBlockParserRuleCall_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ContinueStatement:
		//    'continue' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'continue' ';'
		public Group getGroup() { return cGroup; }
		
		//'continue'
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BreakStatement:
		//    'break' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'break' ';'
		public Group getGroup() { return cGroup; }
		
		//'break'
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeTypeEnumRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersIDTerminalRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBlockParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//FunctionDeclaration:
		//    (returnType=Type)? 'function' name=ID '(' (parameters+=ID (',' parameters+=ID)*)? ')' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//(returnType=Type)? 'function' name=ID '(' (parameters+=ID (',' parameters+=ID)*)? ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//(returnType=Type)?
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }
		
		//Type
		public RuleCall getReturnTypeTypeEnumRuleCall_0_0() { return cReturnTypeTypeEnumRuleCall_0_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=ID (',' parameters+=ID)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_4_0_0() { return cParametersIDTerminalRuleCall_4_0_0; }
		
		//(',' parameters+=ID)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_4_1_1_0() { return cParametersIDTerminalRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=Block
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_6_0() { return cBodyBlockParserRuleCall_6_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameFunctionDeclarationCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameFunctionDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cNameFunctionDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall:
		//    name=[FunctionDeclaration|ID] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=[FunctionDeclaration|ID] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//name=[FunctionDeclaration|ID]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[FunctionDeclaration|ID]
		public CrossReference getNameFunctionDeclarationCrossReference_0_0() { return cNameFunctionDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getNameFunctionDeclarationIDTerminalRuleCall_0_0_1() { return cNameFunctionDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FunctionReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FunctionReturn:
		//    'return' expr=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expr=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ConsoleLogStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ConsoleLogStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConsoleLogStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConsoleLogKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConsoleLogStatement:
		//    {ConsoleLogStatement} 'console.log' '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ConsoleLogStatement} 'console.log' '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{ConsoleLogStatement}
		public Action getConsoleLogStatementAction_0() { return cConsoleLogStatementAction_0; }
		
		//'console.log'
		public Keyword getConsoleLogKeyword_1() { return cConsoleLogKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_0_0() { return cArgumentsExpressionParserRuleCall_3_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_1_1_0() { return cArgumentsExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class TryCatchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TryCatchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTryBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTryBlockBlockParserRuleCall_1_0 = (RuleCall)cTryBlockAssignment_1.eContents().get(0);
		private final Keyword cCatchKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExceptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExceptionIDTerminalRuleCall_4_0 = (RuleCall)cExceptionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCatchBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCatchBlockBlockParserRuleCall_6_0 = (RuleCall)cCatchBlockAssignment_6.eContents().get(0);
		
		//TryCatchStatement:
		//    'try' tryBlock=Block 'catch' '(' exception=ID ')' catchBlock=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'try' tryBlock=Block 'catch' '(' exception=ID ')' catchBlock=Block
		public Group getGroup() { return cGroup; }
		
		//'try'
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }
		
		//tryBlock=Block
		public Assignment getTryBlockAssignment_1() { return cTryBlockAssignment_1; }
		
		//Block
		public RuleCall getTryBlockBlockParserRuleCall_1_0() { return cTryBlockBlockParserRuleCall_1_0; }
		
		//'catch'
		public Keyword getCatchKeyword_2() { return cCatchKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//exception=ID
		public Assignment getExceptionAssignment_4() { return cExceptionAssignment_4; }
		
		//ID
		public RuleCall getExceptionIDTerminalRuleCall_4_0() { return cExceptionIDTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//catchBlock=Block
		public Assignment getCatchBlockAssignment_6() { return cCatchBlockAssignment_6; }
		
		//Block
		public RuleCall getCatchBlockBlockParserRuleCall_6_0() { return cCatchBlockBlockParserRuleCall_6_0; }
	}
	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCasesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCasesCaseParserRuleCall_5_0 = (RuleCall)cCasesAssignment_5.eContents().get(0);
		private final Assignment cDefaultCaseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultCaseDefaultParserRuleCall_6_0 = (RuleCall)cDefaultCaseAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SwitchStatement:
		//    'switch' '(' expression=Expression ')' '{'
		//    cases+=Case*
		//    (defaultCase=Default)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' '(' expression=Expression ')' '{'
		//cases+=Case*
		//(defaultCase=Default)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//cases+=Case*
		public Assignment getCasesAssignment_5() { return cCasesAssignment_5; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_5_0() { return cCasesCaseParserRuleCall_5_0; }
		
		//(defaultCase=Default)?
		public Assignment getDefaultCaseAssignment_6() { return cDefaultCaseAssignment_6; }
		
		//Default
		public RuleCall getDefaultCaseDefaultParserRuleCall_6_0() { return cDefaultCaseDefaultParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//Case:
		//    'case' value=Expression ':' statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' value=Expression ':' statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}
	public class DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//Default:
		//    {Default} 'default' ':' statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Default} 'default' ':' statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{Default}
		public Action getDefaultAction_0() { return cDefaultAction_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}
	public class StringManipulationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StringManipulationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStringManipulationFunctionCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringManipulationStatement:
		//    StringManipulationFunctionCall ';';
		@Override public ParserRule getRule() { return rule; }
		
		//StringManipulationFunctionCall ';'
		public Group getGroup() { return cGroup; }
		
		//StringManipulationFunctionCall
		public RuleCall getStringManipulationFunctionCallParserRuleCall_0() { return cStringManipulationFunctionCallParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class StringManipulationFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StringManipulationFunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSplitFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJoinFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSliceFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StringManipulationFunctionCall:
		//    SplitFunctionCall | JoinFunctionCall | SliceFunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//SplitFunctionCall | JoinFunctionCall | SliceFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SplitFunctionCall
		public RuleCall getSplitFunctionCallParserRuleCall_0() { return cSplitFunctionCallParserRuleCall_0; }
		
		//JoinFunctionCall
		public RuleCall getJoinFunctionCallParserRuleCall_1() { return cJoinFunctionCallParserRuleCall_1; }
		
		//SliceFunctionCall
		public RuleCall getSliceFunctionCallParserRuleCall_2() { return cSliceFunctionCallParserRuleCall_2; }
	}
	public class SplitFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SplitFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSplitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStrExpressionParserRuleCall_2_0 = (RuleCall)cStrAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDelimiterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDelimiterStringLiteralParserRuleCall_4_0 = (RuleCall)cDelimiterAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SplitFunctionCall:
		//    'split' '(' str=Expression ',' delimiter=StringLiteral ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'split' '(' str=Expression ',' delimiter=StringLiteral ')'
		public Group getGroup() { return cGroup; }
		
		//'split'
		public Keyword getSplitKeyword_0() { return cSplitKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//str=Expression
		public Assignment getStrAssignment_2() { return cStrAssignment_2; }
		
		//Expression
		public RuleCall getStrExpressionParserRuleCall_2_0() { return cStrExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//delimiter=StringLiteral
		public Assignment getDelimiterAssignment_4() { return cDelimiterAssignment_4; }
		
		//StringLiteral
		public RuleCall getDelimiterStringLiteralParserRuleCall_4_0() { return cDelimiterStringLiteralParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class JoinFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.JoinFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStrExpressionParserRuleCall_2_0 = (RuleCall)cStrAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStrAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStrExpressionParserRuleCall_3_1_0 = (RuleCall)cStrAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDelimiterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDelimiterStringLiteralParserRuleCall_5_0 = (RuleCall)cDelimiterAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//JoinFunctionCall:
		//    'join' '(' str+=Expression (',' str+=Expression)* ',' delimiter=StringLiteral ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'join' '(' str+=Expression (',' str+=Expression)* ',' delimiter=StringLiteral ')'
		public Group getGroup() { return cGroup; }
		
		//'join'
		public Keyword getJoinKeyword_0() { return cJoinKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//str+=Expression
		public Assignment getStrAssignment_2() { return cStrAssignment_2; }
		
		//Expression
		public RuleCall getStrExpressionParserRuleCall_2_0() { return cStrExpressionParserRuleCall_2_0; }
		
		//(',' str+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//str+=Expression
		public Assignment getStrAssignment_3_1() { return cStrAssignment_3_1; }
		
		//Expression
		public RuleCall getStrExpressionParserRuleCall_3_1_0() { return cStrExpressionParserRuleCall_3_1_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//delimiter=StringLiteral
		public Assignment getDelimiterAssignment_5() { return cDelimiterAssignment_5; }
		
		//StringLiteral
		public RuleCall getDelimiterStringLiteralParserRuleCall_5_0() { return cDelimiterStringLiteralParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class SliceFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SliceFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSliceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStrExpressionParserRuleCall_2_0 = (RuleCall)cStrAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartINTTerminalRuleCall_4_0 = (RuleCall)cStartAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndINTTerminalRuleCall_6_0 = (RuleCall)cEndAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SliceFunctionCall:
		//    'slice' '(' str=Expression ',' start=INT ',' end=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'slice' '(' str=Expression ',' start=INT ',' end=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'slice'
		public Keyword getSliceKeyword_0() { return cSliceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//str=Expression
		public Assignment getStrAssignment_2() { return cStrAssignment_2; }
		
		//Expression
		public RuleCall getStrExpressionParserRuleCall_2_0() { return cStrExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//start=INT
		public Assignment getStartAssignment_4() { return cStartAssignment_4; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_4_0() { return cStartINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//end=INT
		public Assignment getEndAssignment_6() { return cEndAssignment_6; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_6_0() { return cEndINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ThrowStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ThrowStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ThrowStatement:
		//    'throw' expr=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'throw' expr=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'throw'
		public Keyword getThrowKeyword_0() { return cThrowKeyword_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	public class TypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringStringKeyword_1_0 = (Keyword)cStringEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCharEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCharCharKeyword_2_0 = (Keyword)cCharEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLetEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLetLetKeyword_3_0 = (Keyword)cLetEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBooleanBooleanKeyword_4_0 = (Keyword)cBooleanEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFloatFloatKeyword_5_0 = (Keyword)cFloatEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cVarEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cVarVarKeyword_6_0 = (Keyword)cVarEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cConstEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cConstConstKeyword_7_0 = (Keyword)cConstEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cVoidEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cVoidVoidKeyword_8_0 = (Keyword)cVoidEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum Type:
		//    int |
		//    String |
		//    char |
		//    let |
		//    boolean |
		//    float |
		//    var |
		//    const|
		//    void
		//    ;
		public EnumRule getRule() { return rule; }
		
		//int |
		//String |
		//char |
		//let |
		//boolean |
		//float |
		//var |
		//const|
		//void
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }
		
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }
		
		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_1() { return cStringEnumLiteralDeclaration_1; }
		
		public Keyword getStringStringKeyword_1_0() { return cStringStringKeyword_1_0; }
		
		//char
		public EnumLiteralDeclaration getCharEnumLiteralDeclaration_2() { return cCharEnumLiteralDeclaration_2; }
		
		public Keyword getCharCharKeyword_2_0() { return cCharCharKeyword_2_0; }
		
		//let
		public EnumLiteralDeclaration getLetEnumLiteralDeclaration_3() { return cLetEnumLiteralDeclaration_3; }
		
		public Keyword getLetLetKeyword_3_0() { return cLetLetKeyword_3_0; }
		
		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_4() { return cBooleanEnumLiteralDeclaration_4; }
		
		public Keyword getBooleanBooleanKeyword_4_0() { return cBooleanBooleanKeyword_4_0; }
		
		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_5() { return cFloatEnumLiteralDeclaration_5; }
		
		public Keyword getFloatFloatKeyword_5_0() { return cFloatFloatKeyword_5_0; }
		
		//var
		public EnumLiteralDeclaration getVarEnumLiteralDeclaration_6() { return cVarEnumLiteralDeclaration_6; }
		
		public Keyword getVarVarKeyword_6_0() { return cVarVarKeyword_6_0; }
		
		//const
		public EnumLiteralDeclaration getConstEnumLiteralDeclaration_7() { return cConstEnumLiteralDeclaration_7; }
		
		public Keyword getConstConstKeyword_7_0() { return cConstConstKeyword_7_0; }
		
		//void
		public EnumLiteralDeclaration getVoidEnumLiteralDeclaration_8() { return cVoidEnumLiteralDeclaration_8; }
		
		public Keyword getVoidVoidKeyword_8_0() { return cVoidVoidKeyword_8_0; }
	}
	
	private final DomainModelElements pDomainModel;
	private final ImportElements pImport;
	private final ImportElementElements pImportElement;
	private final StatementElements pStatement;
	private final BlockElements pBlock;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ExpressionStatementElements pExpressionStatement;
	private final ExpressionElements pExpression;
	private final AugmentedAssignmentElements pAugmentedAssignment;
	private final LogicalExpressionElements pLogicalExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final MultiplicationExpressionElements pMultiplicationExpression;
	private final ExponentiationExpressionElements pExponentiationExpression;
	private final PrimaryElements pPrimary;
	private final UnaryExpressionElements pUnaryExpression;
	private final PostfixOperatorElements pPostfixOperator;
	private final PrefixOperatorElements pPrefixOperator;
	private final AnonymousFunctionElements pAnonymousFunction;
	private final NumberLiteralElements pNumberLiteral;
	private final NUMBERElements pNUMBER;
	private final BooleanElements pBoolean;
	private final NotBooleanElements pNotBoolean;
	private final TerminalRule tNOT;
	private final StringLiteralElements pStringLiteral;
	private final CharLiteralElements pCharLiteral;
	private final VariableReferenceElements pVariableReference;
	private final ComparisonOperatorElements pComparisonOperator;
	private final LogicalOperatorElements pLogicalOperator;
	private final MultiplicationOperatorElements pMultiplicationOperator;
	private final ArithmeticOperatorElements pArithmeticOperator;
	private final ExponentiationOperatorElements pExponentiationOperator;
	private final AugmentedOperatorElements pAugmentedOperator;
	private final IfStatementElements pIfStatement;
	private final ForLoopElements pForLoop;
	private final WhileLoopElements pWhileLoop;
	private final DoWhileLoopElements pDoWhileLoop;
	private final ContinueStatementElements pContinueStatement;
	private final BreakStatementElements pBreakStatement;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final FunctionCallElements pFunctionCall;
	private final FunctionReturnElements pFunctionReturn;
	private final ConsoleLogStatementElements pConsoleLogStatement;
	private final TryCatchStatementElements pTryCatchStatement;
	private final SwitchStatementElements pSwitchStatement;
	private final CaseElements pCase;
	private final DefaultElements pDefault;
	private final TypeElements eType;
	private final StringManipulationStatementElements pStringManipulationStatement;
	private final StringManipulationFunctionCallElements pStringManipulationFunctionCall;
	private final SplitFunctionCallElements pSplitFunctionCall;
	private final JoinFunctionCallElements pJoinFunctionCall;
	private final SliceFunctionCallElements pSliceFunctionCall;
	private final ThrowStatementElements pThrowStatement;
	private final TerminalRule tSTRING;
	private final TerminalRule tCHAR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainModel = new DomainModelElements();
		this.pImport = new ImportElements();
		this.pImportElement = new ImportElementElements();
		this.pStatement = new StatementElements();
		this.pBlock = new BlockElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pExpression = new ExpressionElements();
		this.pAugmentedAssignment = new AugmentedAssignmentElements();
		this.pLogicalExpression = new LogicalExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pMultiplicationExpression = new MultiplicationExpressionElements();
		this.pExponentiationExpression = new ExponentiationExpressionElements();
		this.pPrimary = new PrimaryElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pPostfixOperator = new PostfixOperatorElements();
		this.pPrefixOperator = new PrefixOperatorElements();
		this.pAnonymousFunction = new AnonymousFunctionElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pNUMBER = new NUMBERElements();
		this.pBoolean = new BooleanElements();
		this.pNotBoolean = new NotBooleanElements();
		this.tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NOT");
		this.pStringLiteral = new StringLiteralElements();
		this.pCharLiteral = new CharLiteralElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
		this.pLogicalOperator = new LogicalOperatorElements();
		this.pMultiplicationOperator = new MultiplicationOperatorElements();
		this.pArithmeticOperator = new ArithmeticOperatorElements();
		this.pExponentiationOperator = new ExponentiationOperatorElements();
		this.pAugmentedOperator = new AugmentedOperatorElements();
		this.pIfStatement = new IfStatementElements();
		this.pForLoop = new ForLoopElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pDoWhileLoop = new DoWhileLoopElements();
		this.pContinueStatement = new ContinueStatementElements();
		this.pBreakStatement = new BreakStatementElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pFunctionReturn = new FunctionReturnElements();
		this.pConsoleLogStatement = new ConsoleLogStatementElements();
		this.pTryCatchStatement = new TryCatchStatementElements();
		this.pSwitchStatement = new SwitchStatementElements();
		this.pCase = new CaseElements();
		this.pDefault = new DefaultElements();
		this.eType = new TypeElements();
		this.pStringManipulationStatement = new StringManipulationStatementElements();
		this.pStringManipulationFunctionCall = new StringManipulationFunctionCallElements();
		this.pSplitFunctionCall = new SplitFunctionCallElements();
		this.pJoinFunctionCall = new JoinFunctionCallElements();
		this.pSliceFunctionCall = new SliceFunctionCallElements();
		this.pThrowStatement = new ThrowStatementElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CHAR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainModel:
	//        (statements+=Statement)*
	//    ;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	//Import:
	//    "import" ((importedElement+=ImportElement ","? |"{"(importedElements+=ImportElement  (',' importedElements+=ImportElement)*)?"}" )+ "from")? importURI=STRING
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ImportElement returns Import:
	//    element=(ID|"*"|STRING) ("as" alias=ID)?
	//;
	public ImportElementElements getImportElementAccess() {
		return pImportElement;
	}
	
	public ParserRule getImportElementRule() {
		return getImportElementAccess().getRule();
	}
	
	//Statement:
	//    VariableDeclaration | ExpressionStatement | IfStatement | ForLoop |
	//    WhileLoop | DoWhileLoop | ContinueStatement | BreakStatement | FunctionDeclaration |
	//    FunctionCall | FunctionReturn | ConsoleLogStatement | TryCatchStatement | SwitchStatement |
	//    StringManipulationStatement | ThrowStatement|Import;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Block:
	//    '{' statements+=Statement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//VariableDeclaration:
	//    type=Type name=ID ('=' expr=Expression)? ';';
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//ExpressionStatement:
	//    expr=Expression';';
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//Expression:
	//  LogicalExpression| PostfixOperator | PrefixOperator | AugmentedAssignment;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AugmentedAssignment:
	//    VariableReference AugmentedOperator expr=Expression;
	public AugmentedAssignmentElements getAugmentedAssignmentAccess() {
		return pAugmentedAssignment;
	}
	
	public ParserRule getAugmentedAssignmentRule() {
		return getAugmentedAssignmentAccess().getRule();
	}
	
	//LogicalExpression returns Expression:
	//    ComparisonExpression (({LogicalExpression.left=current} LogicalOperator) right=ComparisonExpression)*;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return pLogicalExpression;
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}
	
	//   // ('?' trueExpr=Expression ':' falseExpr=Expression)?;
	//ComparisonExpression returns Expression:
	//    ArithmeticExpression ({ComparisonExpression.left=current} ComparisonOperator right=ArithmeticExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//ArithmeticExpression returns Expression:
	//    MultiplicationExpression ({ArithmeticExpression.left=current} ArithmeticOperator right=MultiplicationExpression)*;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//MultiplicationExpression returns Expression:
	//    ExponentiationExpression ({MultiplicationExpression.left=current} MultiplicationOperator right=ExponentiationExpression)*;
	public MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return pMultiplicationExpression;
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}
	
	//ExponentiationExpression returns Expression:
	//    Primary ({ExponentiationExpression.left=current} ExponentiationOperator right=Primary)*;
	public ExponentiationExpressionElements getExponentiationExpressionAccess() {
		return pExponentiationExpression;
	}
	
	public ParserRule getExponentiationExpressionRule() {
		return getExponentiationExpressionAccess().getRule();
	}
	
	//Primary returns Expression:
	//    '(' Expression ')' | NumberLiteral | StringLiteral | CharLiteral | VariableReference |
	//    AnonymousFunction | Boolean| NotBoolean;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//UnaryExpression returns Expression:
	//    Primary;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//PostfixOperator:
	//    VariableReference ( '++' | '--') ;
	public PostfixOperatorElements getPostfixOperatorAccess() {
		return pPostfixOperator;
	}
	
	public ParserRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	//PrefixOperator:
	//    ('++' | '--') VariableReference;
	public PrefixOperatorElements getPrefixOperatorAccess() {
		return pPrefixOperator;
	}
	
	public ParserRule getPrefixOperatorRule() {
		return getPrefixOperatorAccess().getRule();
	}
	
	//AnonymousFunction:
	//    'function' '(' (parameters+=ID (',' parameters+=ID)*)? ')' body=Block;
	public AnonymousFunctionElements getAnonymousFunctionAccess() {
		return pAnonymousFunction;
	}
	
	public ParserRule getAnonymousFunctionRule() {
		return getAnonymousFunctionAccess().getRule();
	}
	
	//NumberLiteral:
	//    value=NUMBER;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//NUMBER returns ecore::EBigDecimal:
	//    INT ('.' INT)?;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//Boolean returns Expression:
	//    {Boolean} value=("true" | "false" | "null");
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//NotBoolean returns Expression:
	//    {NotBoolean} value=NOT;
	public NotBooleanElements getNotBooleanAccess() {
		return pNotBoolean;
	}
	
	public ParserRule getNotBooleanRule() {
		return getNotBooleanAccess().getRule();
	}
	
	//terminal NOT:
	//'!'? ("true" | "false");
	public TerminalRule getNOTRule() {
		return tNOT;
	}
	
	//StringLiteral:
	// value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//CharLiteral:
	//    value=CHAR;
	public CharLiteralElements getCharLiteralAccess() {
		return pCharLiteral;
	}
	
	public ParserRule getCharLiteralRule() {
		return getCharLiteralAccess().getRule();
	}
	
	//VariableReference:
	//    name=[VariableDeclaration|ID];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//ComparisonOperator:
	//    '<=' | '<' | '>=' | '>' | '!=' | '==' | '=';
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//LogicalOperator:
	//    '&&'|'||';
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return pLogicalOperator;
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//MultiplicationOperator:
	//    '*' | '/' | '%';
	public MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return pMultiplicationOperator;
	}
	
	public ParserRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}
	
	//ArithmeticOperator:
	//    '+' | '-';
	public ArithmeticOperatorElements getArithmeticOperatorAccess() {
		return pArithmeticOperator;
	}
	
	public ParserRule getArithmeticOperatorRule() {
		return getArithmeticOperatorAccess().getRule();
	}
	
	//ExponentiationOperator:
	//    '**';
	public ExponentiationOperatorElements getExponentiationOperatorAccess() {
		return pExponentiationOperator;
	}
	
	public ParserRule getExponentiationOperatorRule() {
		return getExponentiationOperatorAccess().getRule();
	}
	
	//AugmentedOperator:
	//    '+=' | '-=' | '*=' | '/=' | '%=' | '**=';
	public AugmentedOperatorElements getAugmentedOperatorAccess() {
		return pAugmentedOperator;
	}
	
	public ParserRule getAugmentedOperatorRule() {
		return getAugmentedOperatorAccess().getRule();
	}
	
	//IfStatement:
	//    'if' '(' condition=Expression ')' thenBranch=Block ('else' elseBranch=Block)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ForLoop:
	//    'for' '(' initialization=Expression ';' condition=Expression ';' increment=Expression ')' body=Block;
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//WhileLoop:
	//    'while' '(' condition=Expression ')' body=Block;
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//DoWhileLoop:
	//    'do' body=Block 'while' '(' condition=Expression ')' ';';
	public DoWhileLoopElements getDoWhileLoopAccess() {
		return pDoWhileLoop;
	}
	
	public ParserRule getDoWhileLoopRule() {
		return getDoWhileLoopAccess().getRule();
	}
	
	//ContinueStatement:
	//    'continue' ';';
	public ContinueStatementElements getContinueStatementAccess() {
		return pContinueStatement;
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}
	
	//BreakStatement:
	//    'break' ';';
	public BreakStatementElements getBreakStatementAccess() {
		return pBreakStatement;
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}
	
	//FunctionDeclaration:
	//    (returnType=Type)? 'function' name=ID '(' (parameters+=ID (',' parameters+=ID)*)? ')' body=Block;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//FunctionCall:
	//    name=[FunctionDeclaration|ID] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//FunctionReturn:
	//    'return' expr=Expression ';';
	public FunctionReturnElements getFunctionReturnAccess() {
		return pFunctionReturn;
	}
	
	public ParserRule getFunctionReturnRule() {
		return getFunctionReturnAccess().getRule();
	}
	
	//ConsoleLogStatement:
	//    {ConsoleLogStatement} 'console.log' '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';';
	public ConsoleLogStatementElements getConsoleLogStatementAccess() {
		return pConsoleLogStatement;
	}
	
	public ParserRule getConsoleLogStatementRule() {
		return getConsoleLogStatementAccess().getRule();
	}
	
	//TryCatchStatement:
	//    'try' tryBlock=Block 'catch' '(' exception=ID ')' catchBlock=Block;
	public TryCatchStatementElements getTryCatchStatementAccess() {
		return pTryCatchStatement;
	}
	
	public ParserRule getTryCatchStatementRule() {
		return getTryCatchStatementAccess().getRule();
	}
	
	//SwitchStatement:
	//    'switch' '(' expression=Expression ')' '{'
	//    cases+=Case*
	//    (defaultCase=Default)?
	//    '}';
	public SwitchStatementElements getSwitchStatementAccess() {
		return pSwitchStatement;
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}
	
	//Case:
	//    'case' value=Expression ':' statements+=Statement*;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//Default:
	//    {Default} 'default' ':' statements+=Statement*;
	public DefaultElements getDefaultAccess() {
		return pDefault;
	}
	
	public ParserRule getDefaultRule() {
		return getDefaultAccess().getRule();
	}
	
	//enum Type:
	//    int |
	//    String |
	//    char |
	//    let |
	//    boolean |
	//    float |
	//    var |
	//    const|
	//    void
	//    ;
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//StringManipulationStatement:
	//    StringManipulationFunctionCall ';';
	public StringManipulationStatementElements getStringManipulationStatementAccess() {
		return pStringManipulationStatement;
	}
	
	public ParserRule getStringManipulationStatementRule() {
		return getStringManipulationStatementAccess().getRule();
	}
	
	//StringManipulationFunctionCall:
	//    SplitFunctionCall | JoinFunctionCall | SliceFunctionCall;
	public StringManipulationFunctionCallElements getStringManipulationFunctionCallAccess() {
		return pStringManipulationFunctionCall;
	}
	
	public ParserRule getStringManipulationFunctionCallRule() {
		return getStringManipulationFunctionCallAccess().getRule();
	}
	
	//SplitFunctionCall:
	//    'split' '(' str=Expression ',' delimiter=StringLiteral ')';
	public SplitFunctionCallElements getSplitFunctionCallAccess() {
		return pSplitFunctionCall;
	}
	
	public ParserRule getSplitFunctionCallRule() {
		return getSplitFunctionCallAccess().getRule();
	}
	
	//JoinFunctionCall:
	//    'join' '(' str+=Expression (',' str+=Expression)* ',' delimiter=StringLiteral ')';
	public JoinFunctionCallElements getJoinFunctionCallAccess() {
		return pJoinFunctionCall;
	}
	
	public ParserRule getJoinFunctionCallRule() {
		return getJoinFunctionCallAccess().getRule();
	}
	
	//SliceFunctionCall:
	//    'slice' '(' str=Expression ',' start=INT ',' end=INT ')';
	public SliceFunctionCallElements getSliceFunctionCallAccess() {
		return pSliceFunctionCall;
	}
	
	public ParserRule getSliceFunctionCallRule() {
		return getSliceFunctionCallAccess().getRule();
	}
	
	//ThrowStatement:
	//    'throw' expr=Expression ';';
	public ThrowStatementElements getThrowStatementAccess() {
		return pThrowStatement;
	}
	
	public ParserRule getThrowStatementRule() {
		return getThrowStatementAccess().getRule();
	}
	
	//terminal STRING:
	//    '"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal CHAR:
	//    '\'' ('a'..'z' | 'A'..'Z' | '0'..'9') '\'';
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
